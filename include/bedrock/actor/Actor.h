#pragma once

class Actor {

public:
    static long TOTAL_AIR_SUPPLY;
    static long DAMAGE_NEARBY_MOBS_DURATION;
    static long DEFAULT_AMBIENT_SOUND_INTERVAL;
    static long DEFAULT_AMBIENT_SOUND_INTERVAL_RANGE;
    static long RIDING_TAG[abi:cxx11];

    virtual void reloadHardcoded(Actor::InitializationMethod, VariantParameterList const&);
    virtual void reloadHardcodedClient(Actor::InitializationMethod, VariantParameterList const&);
    virtual void initializeComponents(Actor::InitializationMethod, VariantParameterList const&);
    virtual void reloadComponents(Actor::InitializationMethod, VariantParameterList const&);
    virtual bool hasComponent(Util::HashString const&)const;
    virtual Actor::~Actor();
    virtual void reset(void);
    virtual void getOnDeathExperience(void);
    virtual void getOwnerEntityType(void);
    virtual void remove(void);
    virtual void setPos(Vec3 const&);
    virtual void getPos(void)const;
    virtual void getPosOld(void)const;
    virtual void getPosExtrapolated(float)const;
    virtual void getAttachPos(ActorLocation, float)const;
    virtual void getFiringPos(void)const;
    virtual void setRot(Vec2 const&);
    virtual void move(Vec3 const&);
    virtual void getInterpolatedRidingPosition(float)const;
    virtual void getInterpolatedBodyRot(float)const;
    virtual void getInterpolatedHeadRot(float)const;
    virtual void getInterpolatedBodyYaw(float)const;
    virtual void getYawSpeedInDegreesPerSecond(void)const;
    virtual void getInterpolatedWalkAnimSpeed(float)const;
    virtual void getInterpolatedRidingOffset(float)const;
    virtual void checkBlockCollisions(AABB const&);
    virtual void checkBlockCollisions(void);
    virtual void breaksFallingBlocks(void)const;
    virtual void blockedByShield(ActorDamageSource const&, Actor&);
    virtual void moveRelative(float, float, float, float);
    virtual void teleportTo(Vec3 const&, bool, int, int);
    virtual void tryTeleportTo(Vec3 const&, bool, bool, int, int);
    virtual void chorusFruitTeleport(Vec3 &);
    virtual void lerpTo(Vec3 const&, Vec2 const&, int);
    virtual void lerpMotion(Vec3 const&);
    virtual void getAddPacket(void);
    virtual void normalTick(void);
    virtual void baseTick(void);
    virtual void rideTick(void);
    virtual void positionRider(Actor&, float);
    virtual void getRidingHeight(void);
    virtual void startRiding(Actor&);
    virtual void addRider(Actor&);
    virtual void flagRiderToRemove(Actor&);
    virtual void getExitTip(std::string const&, InputMode)const;
    virtual void intersects(Vec3 const&, Vec3 const&)const;
    virtual bool isFree(Vec3 const&, float);
    virtual bool isFree(Vec3 const&);
    virtual bool isInWall(void)const;
    virtual bool isInvisible(void)const;
    virtual bool canShowNameTag(void)const;
    virtual bool canExistInPeaceful(void)const;
    virtual void setNameTagVisible(bool);
    virtual void getNameTag[abi:cxx11](void)const;
    virtual void getNameTagAsHash(void)const;
    virtual void getFormattedNameTag[abi:cxx11](void)const;
    virtual void filterFormattedNameTag(UIProfanityContext const&);
    virtual void setNameTag(std::string const&);
    virtual void getAlwaysShowNameTag(void)const;
    virtual void setScoreTag(std::string const&);
    virtual void getScoreTag[abi:cxx11](void)const;
    virtual bool isInWater(void)const;
    virtual bool hasEnteredWater(void)const;
    virtual bool isImmersedInWater(void)const;
    virtual bool isInWaterOrRain(void)const;
    virtual bool isInLava(void)const;
    virtual bool isUnderLiquid(MaterialType)const;
    virtual bool isOverWater(void)const;
    virtual void makeStuckInBlock(float);
    virtual void getCameraOffset(void)const;
    virtual void getShadowHeightOffs(void);
    virtual void getShadowRadius(void)const;
    virtual void getHeadLookVector(float);
    virtual bool canSeeInvisible(void)const;
    virtual bool canSee(Actor const&)const;
    virtual bool canSee(Vec3 const&)const;
    virtual bool isSkyLit(float);
    virtual void getBrightness(float)const;
    virtual void interactPreventDefault(void);
    virtual void playerTouch(Player &);
    virtual void onAboveBubbleColumn(bool);
    virtual void onInsideBubbleColumn(bool);
    virtual bool isImmobile(void)const;
    virtual bool isSilent(void);
    virtual bool isPickable(void);
    virtual bool isFishable(void)const;
    virtual bool isSleeping(void)const;
    virtual bool isShootable(void);
    virtual bool isSneaking(void)const;
    virtual void setSneaking(bool);
    virtual bool isBlocking(void)const;
    virtual bool isDamageBlocked(ActorDamageSource const&)const;
    virtual bool isAlive(void)const;
    virtual bool isOnFire(void)const;
    virtual bool isOnHotBlock(void)const;
    virtual bool isCreativeModeAllowed(void);
    virtual bool isSurfaceMob(void)const;
    virtual bool isTargetable(void)const;
    virtual bool canAttack(Actor*, bool)const;
    virtual void setTarget(Actor*);
    virtual void findAttackTarget(void);
    virtual bool isValidTarget(Actor*)const;
    virtual void attack(Actor&);
    virtual void performRangedAttack(Actor&, float);
    virtual void adjustDamageAmount(int &)const;
    virtual void getEquipmentCount(void)const;
    virtual void setOwner(ActorUniqueID);
    virtual void setSitting(bool);
    virtual void onTame(void);
    virtual void onFailedTame(void);
    virtual void getInventorySize(void)const;
    virtual void getEquipSlots(void)const;
    virtual void getChestSlots(void)const;
    virtual void setStanding(bool);
    virtual bool canPowerJump(void)const;
    virtual void setCanPowerJump(bool);
    virtual bool isJumping(void)const;
    virtual bool isEnchanted(void)const;
    virtual void rideJumped(void);
    virtual void rideLanded(Vec3 const&, Vec3 const&);
    virtual void shouldRender(void)const;
    virtual bool isInvulnerableTo(ActorDamageSource const&)const;
    virtual void actuallyHurt(int, ActorDamageSource const*, bool);
    virtual void animateHurt(void);
    virtual void doFireHurt(int);
    virtual void onLightningHit(void);
    virtual void onBounceStarted(BlockPos const&, Block const&);
    virtual void feed(int);
    virtual void handleEntityEvent(ActorEvent, int);
    virtual void getPickRadius(void);
    virtual void spawnAtLocation(int, int);
    virtual void spawnAtLocation(int, int, float);
    virtual void spawnAtLocation(Block const&, int);
    virtual void spawnAtLocation(Block const&, int, float);
    virtual void spawnAtLocation(ItemStack const&, float);
    virtual void despawn(void);
    virtual void killed(Actor&);
    virtual void awardKillScore(Actor&, int);
    virtual void setArmor(ArmorSlot, ItemStack const&);
    virtual void getArmor(ArmorSlot)const;
    virtual void getArmorMaterialTypeInSlot(ArmorSlot)const;
    virtual void getArmorMaterialTextureTypeInSlot(ArmorSlot)const;
    virtual void getArmorColorInSlot(ArmorSlot, int)const;
    virtual void setEquippedSlot(ArmorSlot, int, int);
    virtual void setEquippedSlot(ArmorSlot, ItemStack const&);
    virtual void getCarriedItem(void)const;
    virtual void setCarriedItem(ItemStack const&);
    virtual void setOffhandSlot(ItemStack const&);
    virtual void getEquippedTotem(void)const;
    virtual void consumeTotem(void);
    virtual void save(CompoundTag &);
    virtual void saveWithoutId(CompoundTag &);
    virtual void load(CompoundTag const&, DataLoadHelper &);
    virtual void loadLinks(CompoundTag const&, std::vector<ActorLink, std::allocator<ActorLink>> &, DataLoadHelper &);
    virtual void getEntityTypeId(void)const;
    virtual void queryEntityRenderer(void)const;
    virtual void getSourceUniqueID(void)const;
    virtual void setOnFire(int);
    virtual void getHandleWaterAABB(void)const;
    virtual void handleInsidePortal(BlockPos const&);
    virtual void getPortalCooldown(void)const;
    virtual void getPortalWaitTime(void)const;
    virtual void getDimensionId(void)const;
    virtual bool canChangeDimensions(void)const;
    virtual void changeDimension(AutomaticID<Dimension, int>, bool);
    virtual void changeDimension(ChangeDimensionPacket const&);
    virtual void getControllingPlayer(void)const;
    virtual void checkFallDamage(float, bool);
    virtual void causeFallDamage(float);
    virtual void handleFallDistanceOnServer(float, bool);
    virtual void playSynchronizedSound(LevelSoundEvent, Vec3 const&, Block const&, bool);
    virtual void playSynchronizedSound(LevelSoundEvent, Vec3 const&, int, bool);
    virtual void onSynchedDataUpdate(int);
    virtual bool canAddRider(Actor&)const;
    virtual bool canBePulledIntoVehicle(void)const;
    virtual void inCaravan(void)const;
    virtual bool isLeashableType(void);
    virtual void tickLeash(void);
    virtual void sendMotionPacketIfNeeded(void);
    virtual bool canSynchronizeNewEntity(void)const;
    virtual void stopRiding(bool, bool, bool);
    virtual void startSwimming(void);
    virtual void stopSwimming(void);
    virtual void buildDebugInfo(std::string &)const;
    virtual void getCommandPermissionLevel(void)const;
    virtual void getMutableAttribute(Attribute const&);
    virtual void getAttribute(Attribute const&)const;
    virtual void getDeathTime(void)const;
    virtual void heal(int);
    virtual bool isInvertedHealAndHarm(void)const;
    virtual bool canBeAffected(int)const;
    virtual bool canBeAffected(MobEffectInstance const&)const;
    virtual bool canBeAffectedByArrow(MobEffectInstance const&)const;
    virtual void onEffectAdded(MobEffectInstance &);
    virtual void onEffectUpdated(MobEffectInstance const&);
    virtual void onEffectRemoved(MobEffectInstance &);
    virtual void getAnimationComponent(void);
    virtual void openContainerComponent(Player &);
    virtual void swing(void);
    virtual void useItem(ItemStack &, ItemUseMethod, bool);
    virtual bool hasOutputSignal(unsigned char)const;
    virtual void getOutputSignal(void)const;
    virtual void getDebugText(std::vector<std::string, std::allocator<std::string>> &);
    virtual void getMapDecorationRotation(void)const;
    virtual void getRiderYRotation(Actor const&)const;
    virtual void getYHeadRot(void)const;
    virtual bool isWorldBuilder(void);
    virtual bool isCreative(void)const;
    virtual bool isAdventure(void)const;
    virtual void add(ItemStack &);
    virtual void drop(ItemStack const&, bool);
    virtual void getInteraction(Player &, ActorInteraction &, Vec3 const&);
    virtual bool canDestroyBlock(Block const&)const;
    virtual void setAuxValue(int);
    virtual void setSize(float, float);
    virtual void getLifeSpan(void)const;
    virtual void onOrphan(void);
    virtual void wobble(void);
    virtual void wasHurt(void);
    virtual void startSpinAttack(void);
    virtual void stopSpinAttack(void);
    virtual void setDamageNearbyMobs(bool);
    virtual void renderDebugServerState(Options const&);
    virtual void reloadLootTable(void);
    virtual void reloadLootTable(EquipmentTableDescription const*);
    virtual void getDeletionDelayTimeSeconds(void)const;
    virtual void kill(void);
    virtual void die(ActorDamageSource const&);
    virtual void shouldTick(void)const;
    virtual void updateEntitySpecificMolangVariables(RenderParams &);
    virtual bool canMakeStepSound(void)const;
    virtual void outOfWorld(void);
    virtual void _hurt(ActorDamageSource const&, int, bool, bool);
    virtual void markHurt(void);
    virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper &);
    virtual void addAdditionalSaveData(CompoundTag &);
    virtual void _playStepSound(BlockPos const&, Block const&);
    virtual void _playFlySound(BlockPos const&, Block const&);
    virtual void _makeFlySound(void)const;
    virtual void checkInsideBlocks(float);
    virtual void pushOutOfBlocks(Vec3 const&);
    virtual void updateWaterState(void);
    virtual void doWaterSplashEffect(void);
    virtual void spawnTrailBubbles(void);
    virtual void updateInsideBlock(void);
    virtual void getLootTable(void);
    virtual void getDefaultLootTable(void);
    virtual void _removeRider(ActorUniqueID const&, bool, bool);
    virtual void _onSizeUpdated(void);
    virtual void _doAutoAttackOnTouch(Actor&);

    void getEntity(void);
    bool hasEntity(void)const;
    Actor(ActorDefinitionGroup *, ActorDefinitionIdentifier const&);
    void setBaseDefinition(ActorDefinitionIdentifier const&, bool, bool);
    Actor(Level &);
    void getStateVectorComponentNonConst(void);
    void initEntity(EntityRegistryOwned &);
    void removeEntity(void);
    void reload(void);
    bool isRegionValid(void)const;
    void updateDescription(void);
    void getLevel(void);
    void _setupServerAnimationComponent(void);
    bool hasCategory(ActorCategory)const;
    void requireReload(void);
    void reloadIfRequired(void);
    void sendActorDefinitionEventTriggered(std::string const&);
    bool hasType(ActorType)const;
    void executeEvent(std::string const&, VariantParameterList const&);
    void getInitializationMethod(void);
    void setLeashHolder(ActorUniqueID);
    void getLeashHolder(void)const;
    void getStateVectorComponent(void)const;
    void _getStateVectorComponentNonConst(void);
    void _defaultInitEquipmentDropChances(void);
    void setVariant(int);
    void setMarkVariant(int);
    void setSkinID(int);
    void setColor(PaletteColor);
    void setColor2(PaletteColor);
    void setStatusFlag(ActorFlags, bool);
    void getStatusFlag(ActorFlags)const;
    bool isBaby(void)const;
    void updateBBFromDescription(void);
    void setCanClimb(bool);
    void setCanFly(bool);
    void setWASDControlled(bool);
    void setStrengthMax(int);
    void setStrength(int);
    void getAttributes(void);
    bool hasTags(void)const;
    void addDefinitionGroup(std::string const&);
    void removeDefinitionGroup(std::string const&);
    bool hasDefinitionGroup(std::string const&)const;
    bool hasFamily(Util::HashString const&)const;
    bool hasTag(std::string const&)const;
    void addTag(std::string const&);
    void removeTag(std::string const&);
    void deregisterTagsFromLevelCache(void);
    bool hasUniqueID(void)const;
    bool hasRuntimeID(void)const;
    void getRuntimeID(void)const;
    void getRideRuntimeID(void)const;
    void getRide(void)const;
    void getUniqueID(void)const;
    void setRuntimeID(ActorRuntimeID);
    void setUniqueID(ActorUniqueID);
    void migrateUniqueID(ActorUniqueID);
    void getEntityData(void);
    void setPersistent(void);
    bool isInClouds(void)const;
    bool isUnderWaterfall(void)const;
    bool canBeginOrContinueClimbingLadder(bool)const;
    void onLadder(bool)const;
    bool canClimb(void)const;
    bool isClimbing(void)const;
    void getVariant(void)const;
    void getMarkVariant(void)const;
    void getSkinID(void)const;
    void getTarget(void)const;
    void getLevel(void)const;
    void getTargetId(void);
    void initParams(VariantParameterList &);
    void calculateAttackDamage(Actor&);
    bool hasEffect(MobEffect const&)const;
    void getEffect(MobEffect const&)const;
    void setBlockTarget(BlockPos const&);
    void getBlockTarget(void)const;
    bool isStackable(void)const;
    bool isTame(void)const;
    bool isTrusting(void)const;
    void getOwner(void)const;
    void getOwnerId(void)const;
    void getPlayerOwner(void)const;
    bool isSitting(void)const;
    bool isLayingDown(void)const;
    void setLayingDown(bool);
    void getAABBShapeComponent(void)const;
    void getRegion(void)const;
    void getDimension(void)const;
    bool isPersistent(void)const;
    bool hasSubBBInLava(void)const;
    void _containsSneakCollisionShapes(AABB const&);
    void getCollidableMobNear(void);
    void testForCollidableMobs(BlockSource &, AABB const&, std::vector<AABB, std::allocator<AABB>> &);
    void moveBBs(Vec3 const&);
    void getTempted(void)const;
    void testForEntityStacking(BlockSource &, AABB const&, std::vector<AABB, std::allocator<AABB>> &);
    void _getAABBShapeComponentNonConst(void);
    void _getBlockOnPos(void);
    void setCollidableMobNear(bool);
    void _playMovementSound(bool);
    bool isInScaffolding(void)const;
    void playSound(LevelSoundEvent, Vec3 const&, Block const&);
    void playSound(LevelSoundEvent, Vec3 const&, int);
    void onOnewayCollision(BlockPos);
    void onOnewayCollision(AABB const&);
    void _updateOnewayCollisions(BlockSource &);
    void checkEntityOnewayCollision(BlockSource &, BlockPos const&);
    void getCollidableMob(void);
    void _updateOwnerChunk(void);
    bool isInWorld(void)const;
    void moveChunks(void);
    void _refreshAABB(void);
    void setPosPrev(Vec3 const&);
    void setPosDirectLegacy(Vec3 const&);
    void setAABBDim(Vec2 const&);
    void setPreviousPosRot(Vec3 const&, Vec2 const&);
    void getLocator(HashedString const&);
    void getActorToWorldTransform(float, bool, Vec3 const&)const;
    void getInterpolatedRotation(float)const;
    void getRadius(void)const;
    void getCenter(float)const;
    void getInterpolatedPosition(float)const;
    void getViewVector(float)const;
    void getViewVector2(float)const;
    void setEnforceRiderRotationLimit(bool);
    void getSpeedInMetersPerSecond(void)const;
    void getVerticalSpeedInMetersPerSecond(void)const;
    void enforceRiderRotationLimit(void)const;
    void _damageNearbyMobs(void);
    void getDamageNearbyMobs(void)const;
    void updateInBubbleColumnState(void);
    bool isFireImmune(void)const;
    void burn(int, bool);
    void tick(BlockSource &);
    bool isGlobal(void)const;
    void setRegion(BlockSource &);
    bool hasTickingArea(void)const;
    void refreshComponents(void);
    bool isControlledByLocalInstance(void)const;
    bool isSwimming(void)const;
    void _manageRiders(BlockSource &);
    void updateTickingData(void);
    bool isRiding(void)const;
    bool isRemoved(void)const;
    void getLinks(void)const;
    void _sendLinkPacket(ActorLink const&)const;
    void _getTallestCollisionShape(AABB const&, AABB const&, Vec3 const&);
    void updateBBFromDescription(CollisionBoxDescription const&);
    void removeAllRiders(bool, bool);
    void positionAllRiders(void);
    void getRideRoot(void)const;
    void getFirstRider(void)const;
    bool hasRider(void)const;
    bool hasFishingHook(void)const;
    void fetchFishingHook(void);
    void clearFishingHookID(void);
    void setFishingHookID(ActorUniqueID);
    void _tryPlaceAt(Vec3 const&);
    void _exitRide(Actor const&, float);
    void getRotation(void)const;
    void moveTo(Vec3 const&, Vec2 const&);
    void _sendDirtyActorData(void);
    bool isRider(ActorUniqueID const&)const;
    void _setAABB(AABB const&);
    void _setAABBDim(Vec2 const&);
    void _setHeightOffset(float);
    void _setPos(Vec3 const&);
    void _setPosPrev(Vec3 const&);
    void setScared(bool);
    bool isScared(void)const;
    void setSeatDescription(Vec3 const&, SeatDescription const&);
    void buildDebugGroupInfo(std::string &)const;
    void spawnDustParticles(int);
    bool hasTeleported(void)const;
    void _isValidBlockToTeleportOnto(Block const&, bool)const;
    void teleportRidersTo(Vec3 const&, int, int);
    void distanceTo(Actor const&)const;
    void distanceTo(Vec3 const&)const;
    void distanceToSqr(Vec3 const&)const;
    void distanceToSqr(Actor const&)const;
    void distanceSqrToBlockPosCenter(BlockPos const&)const;
    void hurt(ActorDamageSource const&, int, bool, bool);
    void spawnTamingParticles(bool);
    void _randomHeartPos(void);
    void _spawnPukeParticles(void);
    void _spawnTreasureHuntingParticles(void);
    bool isInLove(void)const;
    bool isBribed(void)const;
    bool canMate(Actor const&)const;
    bool isAngry(void)const;
    bool isSheared(void)const;
    bool isChested(void)const;
    bool isIgnited(void)const;
    bool hasSaddle(void)const;
    bool isDancing(void)const;
    void setDancing(bool);
    bool isCharged(void)const;
    void setCharged(bool);
    bool isPowered(void)const;
    void setPowered(bool);
    void setTempted(bool);
    void setTradeInterest(bool);
    void getTradeInterest(void)const;
    void setSaddle(bool);
    void setClimbing(bool);
    bool isWalker(void)const;
    void setWalker(bool);
    bool isSwimmer(void)const;
    void setSwimmer(bool);
    bool isDoorBreaker(void)const;
    void setDoorBreaker(bool);
    bool isDoorOpener(void)const;
    void setDoorOpener(bool);
    bool isBreakingObstruction(void)const;
    void setBreakingObstruction(bool);
    void getSwimAmount(float)const;
    void getCurrentSwimAmount(void)const;
    bool canCurrentlySwim(void)const;
    bool canFly(void)const;
    bool isMoving(void)const;
    void setMoving(bool);
    bool isResting(void)const;
    void setResting(bool);
    bool isStanding(void)const;
    bool isWASDControlled(void);
    bool isDelayedAttacking(void)const;
    void setDelayedAttacking(bool);
    void setEnchanted(bool);
    void getJumpDuration(void)const;
    void setJumpDuration(int);
    void getControllingSeat(void);
    void setControllingSeat(int);
    void getStrength(void)const;
    bool isOverScaffolding(void)const;
    void spawnDeathParticles(void);
    void spawnEatParticles(ItemStack const&, int);
    void spawnBalloonPopParticles(void);
    void getColor(void)const;
    void getRegionConst(void)const;
    void getDimensionConst(void)const;
    void resetRegion(void);
    void getAmbientSoundIntervalMin(float &)const;
    void getAmbientSoundIntervalRange(float &)const;
    void getAmbientSoundEvent(void)const;
    void pickUpItem(ItemActor &);
    void pickUpItem(ItemActor &, int);
    bool hasLevel(void)const;
    void getArmorContainer(void);
    void getArmorContainer(void)const;
    void getHandContainer(void);
    void getHandContainer(void)const;
    void getOffhandSlot(void)const;
    bool hasPriorityAmmunition(void)const;
    bool hasTotemEquipped(void)const;
    void _serializeComponents(CompoundTag &);
    void saveLinks(void)const;
    void saveEntityFlags(CompoundTag &);
    void getColor2(void)const;
    void getStrengthMax(void)const;
    bool isOrphan(void)const;
    void loadEntityFlags(CompoundTag const&, DataLoadHelper &);
    void _convertOldSave(CompoundTag const&);
    void getActorIdentifier(void)const;
    void setChanged(void);
    void getEntityData(void)const;
    void _setActorTypeId(ActorType);
    void getSpatialNetworkData(void)const;
    void getSpatialNetworkData(void);
    bool isDebugging(void)const;
    void getRandomPointInAABB(Random &);
    bool isInsideBorderBlock(float)const;
    bool hasPlayerRider(void)const;
    bool isRider(Actor const&)const;
    void getRiderIndex(Actor&)const;
    void getFirstAvailableSeatPos(Actor&, Vec3 &)const;
    void getShakeTime(void)const;
    void setShakeTime(int);
    void pullInEntity(Actor&);
    bool isRiding(Actor*)const;
    bool isLeashed(void)const;
    void getRenderLeashHolder(void);
    void _initializeLeashRopeSystem(void);
    void dropLeash(bool, bool);
    void forEachLeashedActor(std::function<void ()(Actor*)>);
    void getAirSupply(void)const;
    void getTotalAirSupply(void)const;
    bool isAutoSendEnabled(void)const;
    void sendMotionToServer(void);
    void setGlobal(bool);
    bool isAutonomous(void)const;
    void setAutonomous(bool);
    void getHealth(void)const;
    bool isInsidePortal(void);
    void enableAutoSendPosRot(bool);
    void getEntityTerrainInterlockData(void);
    void _tryPlantWitherRose(void);
    void getHurtColor(void)const;
    void _setDimension(Dimension &);
    void buildForward(void)const;
    void getPortalEntranceAxis(void)const;
    void _setNetherPortalData(AutomaticID<Dimension, int>, AutomaticID<Dimension, int>, int);
    void _setLevelPtr(Level *);
    void getRandom(void)const;
    bool isClient(void)const;
    bool hasAttributeBuff(AttributeBuffType)const;
    void getMaxHealth(void)const;
    void serializationSetHealth(int);
    void healEffects(int);
    void addEffect(MobEffectInstance const&);
    void removeEffect(int);
    void removeAllEffects(void);
    void removeEffectParticles(void);
    void removeEffectNoUpdate(int);
    void getActiveEffectCount(void)const;
    bool hasAnyVisibleEffects(void)const;
    bool hasAnyEffects(void)const;
    void getAllEffects(void)const;
    void setInvisible(bool);
    void updateInvisibilityStatus(void);
    void getEconomyTradeableComponent(void)const;
    void resetClientAnimations(void);
    bool hasPersistingTrade(void)const;
    void getPersistingTradeOffers(void);
    void getPersistingTradeRiches(void);
    void savePersistingTrade(std::unique_ptr<CompoundTag, std::default_delete<CompoundTag>>, int);
    void removePersistingTrade(void);
    bool isTickingEntity(void)const;
    void getTickingArea(void);
    void transferTickingArea(Dimension &);
    bool canOpenContainer(Player &)const;
    void setLastHitBB(Vec3 const&, Vec3 const&);
    bool isWithinRestriction(void)const;
    bool isWithinRestriction(BlockPos const&)const;
    bool hasRestriction(void)const;
    void restrictTo(BlockPos const&, float);
    void getRestrictCenter(void)const;
    void getRestrictRadius(void)const;
    void clearRestriction(void);
    void dropTowards(ItemStack const&, Vec3);
    void lovePartnerId(void)const;
    void setInLove(Actor*);
    void calcCenterPos(void)const;
    bool hasEnoughFoodToBreed(void);
    void _countFood(int);
    bool hasExcessFood(void);
    void wantsMoreFood(void);
    void doEnchantDamageEffects(Mob &, Mob &);
    void setChainedDamageEffects(bool);
    void getChainedDamageEffects(void)const;
    void getTradeOffers(void);
    void getSlotAllowedItems(int);
    void setEquipFromPacket(UpdateEquipPacket const&);
    void createUpdateEquipPacket(int);
    void setOffersFromPacket(UpdateTradePacket const&);
    void createUpdateTradePacket(int);
    void setCollidableMob(bool);
    void setExperimental(bool);
    bool isExperimental(void)const;
    void wasLastHitByPlayer(void);
    void setTradingPlayer(Player *);
    void getTradingPlayer(void)const;
    bool isTrading(void)const;
    void pushBackActionEventToActionQueue(ActionEvent);
    void getNextActionEvent(ActionEvent &);
    void clearActionQueue(void);
    bool isActionQueueEmpty(void)const;
    void setLimitedLife(int);
    void onChunkDiscarded(void);
    void shouldOrphan(BlockSource &);
    void setStructuralIntegrity(int);
    void getStructuralIntegrity(void)const;
    void setHurtTime(int);
    void getHurtTime(void)const;
    void setHurtDir(int);
    void getHurtDir(void)const;
    bool isSafeToSleepNear(void)const;
    void fetchNearbyActorsSorted(Vec3 const&, ActorType);
    void getMolangVariables(void);
    void updateMolangVariables(RenderParams &);
    void cacheComponentData(void);
    bool isInPrecipitation(void)const;
    bool isInRain(void)const;
    bool isInSnow(void)const;
    bool isInThunderstorm(void)const;
    void _getLevelPtr(void)const;
    void getEntity(void)const;
    bool isInitialized(void);
};
