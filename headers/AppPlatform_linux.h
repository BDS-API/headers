#pragma once

class AppPlatform_linux : AppPlatform {

    virtual void AppPlatform_linux::~AppPlatform_linux();
    virtual void AppPlatform_linux::~AppPlatform_linux();
    virtual void restartRequested(void);
    virtual void _ZNK11AppPlatform14getLoggingPathB5cxx11Ev;
    virtual void isLowMemoryDevice(void)const;
    virtual void initializeScreenDependentResources(void);
    virtual void getHighPerformanceThreadsCount(void)const;
    virtual void getTotalHardwareThreadsCount(void)const;
    virtual void restartApp(bool);
    virtual void _ZNK17AppPlatform_linux14getPackagePathB5cxx11Ev;
    virtual void _fireAppTerminated(void);
    virtual void hasFastAlphaTest(void)const;
    virtual void supportsScripting(void)const;
    virtual void supportsInPackageRecursion(void)const;
    virtual void supportsXboxLiveAchievements(void)const;
    virtual void _ZNK11AppPlatform19getFeedbackHelpLinkB5cxx11Ev;
    virtual void _ZN11AppPlatform24getModalErrorMessageProcB5cxx11Ev;
    virtual void updateLocalization(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void setSleepEnabled(bool);
    virtual void _ZNK17AppPlatform_linux21getCurrentStoragePathB5cxx11Ev;
    virtual void _ZNK17AppPlatform_linux22getExternalStoragePathB5cxx11Ev;
    virtual void _ZNK17AppPlatform_linux22getInternalStoragePathB5cxx11Ev;
    virtual void _ZNK17AppPlatform_linux15getUserdataPathB5cxx11Ev;
    virtual void _ZN11AppPlatform15getSettingsPathB5cxx11Ev;
    virtual void _ZN11AppPlatform26getPackagedShaderCachePathB5cxx11Ev;
    virtual void _ZN11AppPlatform18getShaderCachePathB5cxx11Ev;
    virtual void _ZNK11AppPlatform24getUserdataPathForLevelsB5cxx11Ev;
    virtual void _ZN11AppPlatform19getCacheStoragePathB5cxx11Ev;
    virtual void _ZN11AppPlatform20getOnDiskScratchPathB5cxx11Ev;
    virtual void _ZNK11AppPlatform21getLevelInfoCachePathB5cxx11Ev;
    virtual void _ZN11AppPlatform27getCatalogSearchScratchPathB5cxx11Ev;
    virtual void hasSeparatedStorageAreasForContentAcquisition(void)const;
    virtual void getOptimalLDBSize(void);
    virtual void showDialog(int);
    virtual void createUserInput(void);
    virtual void getUserInputStatus(void);
    virtual void _ZN11AppPlatform12getUserInputB5cxx11Ev;
    virtual void getFileAccess(ResourceFileSystem);
    virtual void _ZN11AppPlatform26copyImportFileToTempFolderB5cxx11ERKN4Core4PathE;
    virtual void registerFileForCollectionWithCrashDump(Core::Path const&);
    virtual void getScreenWidth(void);
    virtual void getScreenHeight(void);
    virtual void setScreenSize(int, int);
    virtual void setWindowSize(int, int);
    virtual void setWindowText(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void getPixelsPerMillimeter(void);
    virtual void getOperationMode(void)const;
    virtual void allowContentLogWriteToDisk(void);
    virtual void queueForMainThread(std::function<void ()(void)>);
    virtual void getMainThreadQueue(void);
    virtual void supportsLaunchingLegacyVersion(void)const;
    virtual void launchLegacyVersion(void);
    virtual void canManageLegacyData(void)const;
    virtual void supportsDayOneExperience(void)const;
    virtual void hasBroadcastPermission(void);
    virtual void hasAppInstalled(ExternalApp)const;
    virtual void navigateToStoreForApp(ExternalApp)const;
    virtual void launchApp(ExternalApp)const;
    virtual void canSupportApp(ExternalApp)const;
    virtual void startBroadcast(void);
    virtual void isContentAutoUpdateAllowed(void)const;
    virtual void getMaxSimultaneousDownloads(void)const;
    virtual void isDownloadAndImportBlocking(void)const;
    virtual void isDownloadBuffered(void)const;
    virtual void supportsAutoSaveOnDBCompaction(void)const;
    virtual void updateTextBoxText(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void isKeyboardVisible(void);
    virtual void supportsVibration(void);
    virtual void vibrate(int);
    virtual void _ZN17AppPlatform_linux20getAssetFileFullPathB5cxx11ERKN4Core4PathE;
    virtual void _ZN11AppPlatform13readAssetFileB5cxx11ERKN4Core4PathE;
    virtual void listAssetFilesIn(Core::Path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)const;
    virtual void supportsClientUpdate(void)const;
    virtual void _ZNK11AppPlatform18getClientUpdateUrlB5cxx11Ev;
    virtual void checkLicense(void);
    virtual void hasBuyButtonWhenInvalidLicense(void);
    virtual void isNetworkAvailable(void);
    virtual void isNetworkEnabled(bool);
    virtual void setNetworkAllowed(bool);
    virtual void isNetworkAllowed(void);
    virtual void multiplayerRequiresPremiumAccess(void)const;
    virtual void multiplayerRequiresUGCEnabled(void)const;
    virtual void isCrossPlatformToggleVisible(void)const;
    virtual void isTelemetryAllowed(void);
    virtual void isTrialWorldsTransferToFullGameAllowed(void)const;
    virtual void buyGame(void);
    virtual void finish(void);
    virtual void canLaunchUri(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void launchUri(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void launchSettings(void);
    virtual void isRatingsPromptSupported(void)const;
    virtual void launchRatingsPrompt(void);
    virtual void useXboxControlHelpers(void)const;
    virtual void getPlatformType(void)const;
    virtual void isCentennial(void)const;
    virtual void _ZNK11AppPlatform20getPackageFamilyNameB5cxx11Ev;
    virtual void getBuildPlatform(void)const;
    virtual void _ZNK17AppPlatform_linux17getPlatformStringB5cxx11Ev;
    virtual void _ZNK17AppPlatform_linux20getSubPlatformStringB5cxx11Ev;
    virtual void setARVRPlatform(ARVRPlatform);
    virtual void getARVRPlatform(void)const;
    virtual void getNumberOfParticleFramesToInterpolate(void)const;
    virtual void setVRControllerType(VRControllerType);
    virtual void getVRControllerType(void)const;
    virtual void hasIDEProfiler(void);
    virtual void _ZN11AppPlatform20getPlatformStringVarB5cxx11Ei;
    virtual void _ZNK17AppPlatform_linux16getApplicationIdB5cxx11Ev;
    virtual void getFreeMemory(void)const;
    virtual void getMemoryLimit(void)const;
    virtual void getUsedMemory(void);
    virtual void getTotalPhysicalMemory(void)const;
    virtual void getMaximumUsedMemory(void);
    virtual void getMaxSimRadiusInChunks(void)const;
    virtual void _ZN11AppPlatform21getBroadcastAddressesB5cxx11Ev;
    virtual void _ZN11AppPlatform14getIPAddressesB5cxx11Ev;
    virtual void useAppPlatformForTelemetryIPAddress(void);
    virtual void _ZN11AppPlatform12getModelNameB5cxx11Ev;
    virtual void usesHDRBrightness(void)const;
    virtual void setFullscreenMode(FullscreenMode);
    virtual void isNetworkThrottled(void);
    virtual void isLANAllowed(void)const;
    virtual void trackPurchaseEvent(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void sendBrazeEvent(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void sendBrazeEventWithProperty(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int);
    virtual void sendBrazeEventWithStringProperty(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void sendBrazeToastClick(void);
    virtual void sendBrazeDialogButtonClick(int);
    virtual void collectGraphicsHardwareDetails(void);
    virtual void _ZNK11AppPlatform10getEditionB5cxx11Ev;
    virtual void getOSVersion(void)const;
    virtual void isBrazeEnabled(void)const;
    virtual void isFireTV(void)const;
    virtual void isWin10Arm(void)const;
    virtual void setThreadsFrozen(bool);
    virtual void areThreadsFrozen(void)const;
    virtual void getDefaultSafeZoneScaleX(void)const;
    virtual void getDefaultSafeZoneScaleY(void)const;
    virtual void getDefaultScreenPositionX(void)const;
    virtual void getDefaultScreenPositionY(void)const;
    virtual void isQuitCapable(void)const;
    virtual void requireControllerAtStartup(void)const;
    virtual void notifyControllerConnectionStateChange(void)const;
    virtual void platformRequiresControllerApplet(void)const;
    virtual void getDefaultInputMode(void)const;
    virtual void calculateAvailableDiskFreeSpace(Core::Path const&);
    virtual void supportsTextToSpeech(void)const;
    virtual void getSecureStorage(void);
    virtual void getSecureStorageKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void setSecureStorageKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, SecureStorageKey const&);
    virtual void reloadRenderResourcesOnResume(void)const;
    virtual void shouldPauseDownloadsWhenEnterGame(void)const;
    virtual void compareAppReceiptToLocalReceipt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void getThirdPartyPackUUID(void)const;
    virtual void alwaysUseZippedPacksForDlc(void)const;
    virtual void allowsResourcePackDevelopment(void)const;
    virtual void supportsLegacySinglePremiumCacheDirectory(void)const;
    virtual void supportsWorldShare(void)const;
    virtual void hasJournalingFilesystem(void)const;
    virtual void isAutoCompactionEnabled(void)const;
    virtual void getLevelSaveInterval(void)const;
    virtual void getOptionsSaveInterval(void)const;
    virtual void hasPlatformSpecificInvites(void)const;
    virtual void usePlatformProfilePicturesOnly(void)const;
    virtual void requiresXboxLiveSigninToPlay(void)const;
    virtual void requiresLiveGoldForMultiplayer(void)const;
    virtual void shouldRegisterForXboxLiveNotifications(void)const;
    virtual void isRealmsEnabled(void)const;
    virtual void minimizeBackgroundDownloads(void)const;
    virtual void requiresAutoSaveIconExplanationPopup(void)const;
    virtual void getExtraLevelSaveDataIconParams(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)const;
    virtual void requiresPatchNoticePopup(void)const;
    virtual void getMultiplayerServiceListToRegister(void)const;
    virtual void getBroadcastingMultiplayerServiceIds(bool, bool)const;
    virtual void maxFileDataRequestConcurrency(void)const;
    virtual void goToExternalConsumablesStoreListing(void)const;
    virtual void getStoreNetworkFailureTimeout(void)const;
    virtual void createLoggingStorageArea(Core::FileAccessType, Core::Path const&);
    virtual void handlePlatformSpecificSPIErrors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void useNativeStoreForRealmsPurchase(void);
    virtual void importAsFlatFile(void)const;
    virtual void isWebviewSupported(void)const;
    virtual void createWebview(Webview::PlatformArguments &&)const;
    virtual void createXboxLiveSignInHandler(void)const;
    virtual void canAppSelfTerminate(void)const;
    virtual void getPlatformTTSExists(void)const;
    virtual void getPlatformTTSEnabled(void)const;
    virtual void getRenderSurfaceParameters(void)const;
    virtual void shouldRemoveGraphicsDeviceOnAppTermination(void)const;
    virtual void isJoinableViaExternalServers(void)const;
    virtual void onPrimaryUserNetworkReady(void);
    virtual void requiresNetworkOutageMessaging(void)const;
    virtual void usesAsyncOptionSaving(void)const;
    virtual void getPlatformDpi(void)const;
    virtual void getPlatformUIScalingRules(void)const;
    virtual void _ZNK17AppPlatform_linux19getPlatformTempPathB5cxx11Ev;
    virtual void _onInitialize(void);
    virtual void _onTeardown(void);
}
