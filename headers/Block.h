#pragma once

class Block {

public:
    static long SIZE_OFFSET;
    static long BLOCK_DESCRIPTION_PREFIX[abi:cxx11];

    virtual ~Block();
    virtual void getRenderLayer(void)const;

    void getLegacyBlock(void)const;
    void getDataDEPRECATED(void)const;
    void getStateFromLegacyData(unsigned short)const;
    void getDefaultState(void)const;
    bool hasState(ItemState const&)const;
    bool isDoor(void)const;
    void getLegacyBlockPtr(void)const;
    bool canContainLiquid(void)const;
    void matchesStates(BlockLegacy const&)const;
    void getBurnOdds(void)const;
    void setFlammable(int, int)const;
    void getFlameOdds(void)const;
    void getLight(void)const;
    bool isSolid(void)const;
    void ignoreBlockForInsideCubeRenderer(void)const;
    void pushesOutItems(void)const;
    void shouldRandomTick(void)const;
    void shouldRandomTickExtraLayer(void)const;
    void getTranslucency(void)const;
    void getLightEmission(void)const;
    bool hasVariableLighting(void)const;
    void Block(unsigned short, WeakPtr<BlockLegacy> &);
    bool canSlide(BlockSource &, BlockPos const&)const;
    bool canInstatick(void)const;
    void getCreativeCategory(void)const;
    void getGravity(void)const;
    void getMaterial(void)const;
    void getMapColor(BlockSource &, BlockPos const&)const;
    void getMapColor(void)const;
    void getFriction(void)const;
    void getDestroySpeed(void)const;
    void tick(BlockSource &, BlockPos const&, Random &)const;
    void animateTick(BlockSource &, BlockPos const&, Random &)const;
    void clip(BlockSource &, BlockPos const&, Vec3 const&, Vec3 const&, bool, AABB const&)const;
    void clip(BlockSource &, BlockPos const&, Vec3 const&, Vec3 const&, bool)const;
    void spawnResources(BlockSource &, BlockPos const&, Block const&, float, int)const;
    void spawnResources(BlockSource &, BlockPos const&, float, int)const;
    void popResource(BlockSource &, BlockPos const&, ItemInstance const&)const;
    void spawnBurnResources(BlockSource &, float, float, float)const;
    void destroy(BlockSource &, BlockPos const&, Actor *)const;
    void playerWillDestroy(Player &, BlockPos const&)const;
    void getIgnoresDestroyPermissions(Actor &, BlockPos const&)const;
    void randomlyModifyPosition(BlockPos const&, int &)const;
    void randomlyModifyPosition(BlockPos const&)const;
    void addCollisionShapes(BlockSource &, BlockPos const&, AABB const*, std::vector<AABB, std::allocator<AABB>> &, Actor *)const;
    void addAABBs(BlockSource &, BlockPos const&, AABB const*, std::vector<AABB, std::allocator<AABB>> &)const;
    void addAABB(AABB const&, AABB const*, std::vector<AABB, std::allocator<AABB>> &)const;
    bool isUnbreakable(void)const;
    bool isHeavy(void)const;
    bool isStrippable(Block const&)const;
    void getStrippedBlock(void)const;
    bool canBeBrokenFromFalling(void)const;
    bool canProvideSupport(unsigned char, BlockSupportType)const;
    bool canConnect(Block const&, unsigned char, Block const&)const;
    void getConnectedDirections(BlockPos const&, BlockSource &, bool &, bool &, bool &, bool &)const;
    void getAABB(BlockSource &, BlockPos const&, AABB &, bool)const;
    void getOutline(BlockSource &, BlockPos const&, AABB &)const;
    void getLiquidClipVolume(BlockSource &, BlockPos const&, AABB &)const;
    void mayPick(void)const;
    void mayPick(BlockSource &, bool)const;
    void getResourceCount(Random &, int)const;
    void asItemInstance(BlockSource &, BlockPos const&)const;
    void getExplosionResistance(Actor *)const;
    bool isInteraction(void)const;
    void use(Player &, BlockPos const&)const;
    void getPlacementBlock(Actor &, BlockPos const&, unsigned char, Vec3 const&, int)const;
    void calcVariant(BlockSource &, BlockPos const&)const;
    bool isAttachedTo(BlockSource &, BlockPos const&, BlockPos&)const;
    void attack(Player *, BlockPos const&)const;
    void handleEntityInside(BlockSource &, BlockPos const&, Actor *, Vec3 &)const;
    bool isAuxValueRelevantForPicking(void)const;
    void getColor(void)const;
    void getColor(BlockSource &, BlockPos const&)const;
    void getColorAtPos(BlockSource &, BlockPos const&)const;
    void getColorForParticle(BlockSource &, BlockPos const&, Block const&)const;
    bool isSeasonTinted(BlockSource &, BlockPos const&)const;
    bool isSignalSource(void)const;
    bool canBeOriginalSurface(void)const;
    void getDirectSignal(BlockSource &, BlockPos const&, int)const;
    void entityInside(BlockSource &, BlockPos const&, Actor &)const;
    void getSilkTouchItemInstance(void)const;
    void playerDestroy(Player &, BlockPos const&)const;
    bool canSurvive(BlockSource &, BlockPos const&)const;
    void getExperienceDrop(Random &)const;
    bool canBeBuiltOver(BlockSource &, BlockPos const&)const;
    void getSerializationId(void)const;
    void buildSerializationId(unsigned int);
    void getRuntimeId(void)const;
    bool hasRuntimeId(void)const;
    void setRuntimeId(unsigned int const&)const;
    void triggerEvent(BlockSource &, BlockPos const&, int, int)const;
    void getAllowsRunes(void)const;
    void telemetryVariant(BlockSource &, BlockPos const&)const;
    void getVariant(void)const;
    void getMappedFace(unsigned char)const;
    void mayPlaceOn(BlockSource &, BlockPos const&)const;
    void mayPlace(BlockSource &, BlockPos const&)const;
    void mayPlace(BlockSource &, BlockPos const&, unsigned char)const;
    void tryToPlace(BlockSource &, BlockPos const&, ActorBlockSyncMessage const*)const;
    void breaksFallingBlocks(void)const;
    void neighborChanged(BlockSource &, BlockPos const&, BlockPos const&)const;
    void getSecondPart(BlockSource &, BlockPos const&, BlockPos&)const;
    void DEPRECATEDcallOnGraphicsModeChanged(bool, bool, bool);
    void checkIsPathable(Actor &, BlockPos const&, BlockPos const&)const;
    void shouldDispense(BlockSource &, Container &)const;
    void dispense(BlockSource &, Container &, int, Vec3 const&, unsigned char)const;
    void onPlace(BlockSource &, BlockPos const&)const;
    void onRemove(BlockSource &, BlockPos const&)const;
    void onExploded(BlockSource &, BlockPos const&, Actor *)const;
    void onStepOn(Actor &, BlockPos const&)const;
    void onFallOn(BlockSource &, BlockPos const&, Actor *, float)const;
    void onProjectileHit(BlockSource &, BlockPos const&, Actor const&)const;
    void transformOnFall(BlockSource &, BlockPos const&, Actor *, float)const;
    void movedByPiston(BlockSource &, BlockPos const&)const;
    void updateEntityAfterFallOn(Actor &)const;
    void ignoreEntitiesOnPistonMove(void)const;
    void onFertilized(BlockSource &, BlockPos const&, Actor *, FertilizerType)const;
    void mayConsumeFertilizer(BlockSource &)const;
    void getIconYOffset(void)const;
    bool isWaterBlocking(void)const;
    bool canBeSilkTouched(void)const;
    void getMobToSpawn(SpawnConditions const&, BlockSource &)const;
    bool isBounceBlock(void)const;
    bool isAlphaTested(void)const;
    bool isSolidBlockingBlock(void)const;
    bool isMotionBlockingBlock(void)const;
    bool isSolidBlockingBlockAndNotSignalSource(void)const;
    bool isEmpty(void)const;
    bool isCropBlock(void)const;
    bool isStemBlock(void)const;
    bool isContainerBlock(void)const;
    bool isCraftingBlock(void)const;
    bool isInteractiveBlock(void)const;
    bool isHurtableBlock(void)const;
    bool isFenceBlock(void)const;
    bool isFenceGateBlock(void)const;
    bool isThinFenceBlock(void)const;
    bool isWallBlock(void)const;
    bool isStairBlock(void)const;
    bool isDoorBlock(void)const;
    bool isButtonBlock(void)const;
    bool isSlabBlock(void)const;
    bool isRailBlock(void)const;
    bool canHurtAndBreakItem(void)const;
    void getBlockEntityType(void)const;
    bool hasBlockEntity(void)const;
    void getRenderLayer(BlockSource &, BlockPos const&)const;
    void getExtraRenderLayers(void)const;
    void getThickness(void)const;
    void getFlexibility(BlockSource &, BlockPos const&)const;
    bool isObstructingChests(BlockSource &, BlockPos const&)const;
    void getVisualShapeInWorld(BlockSource &, BlockPos const&, AABB &, bool)const;
    void getVisualShape(AABB &, bool)const;
    void getUIShape(AABB &)const;
    void getCollisionShape(AABB &, BlockSource &, BlockPos const&, Actor *)const;
    void calcGroundFriction(Mob &, BlockPos const&)const;
    bool canHaveExtraData(void)const;
    bool hasComparatorSignal(void)const;
    void getComparatorSignal(BlockSource &, BlockPos const&, unsigned char)const;
    void shouldStopFalling(Actor &)const;
    void pushesUpFallingBlocks(void)const;
    bool hasProperty(BlockProperty)const;
    void getProperties(void)const;
    void keepState(ItemState const&)const;
    void copyState(Block const&, ItemState const&)const;
    void getShadeBrightness(void)const;
    void getDebugText(std::vector<std::string, std::allocator<std::string>> &, BlockPos const&)const;
    void getParticleQuantityScalar(void)const;
    bool isStandingSign(void)const;
    void dealsContactDamage(Actor const&, bool)const;
    bool hasTag(BlockSource &, BlockPos const&, Block const&, std::string const&)const;
    void getPlacementFacingAll(Actor &, BlockPos const&, float);
    void getPlacementFacingAllExceptAxisY(Actor &, BlockPos const&, float);
    bool isTrapdoor(void)const;
    void liquidCanFlowIntoFromDirection(unsigned char, std::function<Block const& ()(BlockPos const&)> const&, BlockPos const&)const;
    void detachesOnPistonMove(BlockSource &, BlockPos const&)const;
    void onMove(BlockSource &, BlockPos const&, BlockPos const&)const;
    void handleRain(BlockSource &, BlockPos const&, float)const;
    void setupRedstoneComponent(BlockSource &, BlockPos const&)const;
    void getRedstoneProperty(BlockSource &, BlockPos const&)const;
    void onRedstoneUpdate(BlockSource &, BlockPos const&, int, bool)const;
    bool isValidAuxValue(int)const;
    bool canFillAtPos(BlockSource &, BlockPos const&)const;
    void sanitizeFillBlock(BlockSource &, BlockPos const&, Block const&)const;
    void onFillBlock(BlockSource &, BlockPos const&, Block const&)const;
    void waterSpreadCausesSpawn(void)const;
    void getStateMask(ItemState const&)const;
    void shouldConnectToRedstone(BlockSource &, BlockPos const&, int)const;
};
