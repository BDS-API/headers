#pragma once

class ServerLevel : Level {

    virtual void ServerLevel::~ServerLevel();
    virtual void ServerLevel::~ServerLevel();
    virtual void onSourceCreated(BlockSource &);
    virtual void onSourceDestroyed(BlockSource &);
    virtual void onAreaChanged(BlockSource &, BlockPos const&, BlockPos const&);
    virtual void onBlockChanged(BlockSource &, BlockPos const&, unsigned int, Block const&, Block const&, int, ActorBlockSyncMessage const*);
    virtual void onBrightnessChanged(BlockSource &, BlockPos const&);
    virtual void onBlockEntityChanged(BlockSource &, BlockActor &);
    virtual void onBlockEntityAboutToBeRemoved(BlockSource &, std::shared_ptr<BlockActor>);
    virtual void onEntityChanged(BlockSource &, Actor &);
    virtual void onBlockEvent(BlockSource &, int, int, int, int, int);
    virtual void initialize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, LevelSettings const&, LevelData *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const*);
    virtual void startLeaveGame(void);
    virtual void addEntity(BlockSource &, std::unique_ptr<Actor, std::default_delete<Actor>>);
    virtual void addGlobalEntity(BlockSource &, std::unique_ptr<Actor, std::default_delete<Actor>>);
    virtual void addAutonomousEntity(BlockSource &, std::unique_ptr<Actor, std::default_delete<Actor>>);
    virtual void addPlayer(std::unique_ptr<Player, std::default_delete<Player>>);
    virtual void takeEntity(ActorUniqueID);
    virtual void borrowEntity(ActorUniqueID, LevelChunk *);
    virtual void getCurrentServerTick(void)const;
    virtual void getBiomeRegistry(void)const;
    virtual void getBiomeRegistry(void);
    virtual void getBlockPalette(void)const;
    virtual void getBlockPalette(void);
    virtual void getFeatureRegistry(void)const;
    virtual void getFeatureRegistry(void);
    virtual void getFeatureTypeFactory(void)const;
    virtual void getFeatureTypeFactory(void);
    virtual void getJigsawStructureRegistry(void)const;
    virtual void getJigsawStructureRegistry(void);
    virtual void getStructureManager(void);
    virtual void getStructureManager(void)const;
    virtual void getBiomeComponentFactory(void)const;
    virtual void getBiomeComponentFactory(void);
    virtual void getSurfaceBuilderRegistry(void)const;
    virtual void getSurfaceBuilderRegistry(void);
    virtual void getDimensionFactory(void)const;
    virtual void getDimensionFactory(void);
    virtual void onPlayerDeath(Player &, ActorDamageSource const&);
    virtual void tick(void);
    virtual void directTickEntities(BlockSource &);
    virtual void updateSleepingPlayerList(void);
    virtual void setDifficulty(Difficulty);
    virtual void setCommandsEnabled(bool);
    virtual void setWorldTemplateOptionsUnlocked(void);
    virtual void saveAdditionalData(void);
    virtual void getLevelEventCoordinator(void);
    virtual void onNewChunk(BlockSource &, LevelChunk &);
    virtual void onNewChunkFor(Player &, LevelChunk &);
    virtual void onChunkLoaded(LevelChunk &);
    virtual void queueEntityRemoval(std::unique_ptr<Actor, std::default_delete<Actor>> &&, bool);
    virtual void removeEntityReferences(Actor &, bool);
    virtual void loadFunctionManager(void);
    virtual void getClientResourcePackManager(void)const;
    virtual void getServerResourcePackManager(void)const;
    virtual void getTradeTables(void);
    virtual void addEntryToTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void dropEntryFromTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void clearTagCache(void);
    virtual void decrementTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, TagRegistry &);
    virtual void incrementTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, TagRegistry &);
    virtual void runCommand(HashedString const&, CommandOrigin &, CommandOriginSystem, CurrentCmdVersion);
    virtual void getTagRegistry(void);
    virtual void setFinishedInitializing(void);
    virtual void ;
    virtual void `non-virtual thunk to'ServerLevel::~ServerLevel();
    virtual void `non-virtual thunk to'ServerLevel::~ServerLevel();
    virtual void `non-virtual thunk to'Level::getBiomeRegistry(void)const;
    virtual void `non-virtual thunk to'Level::getBiomeRegistry(void);
    virtual void `non-virtual thunk to'Level::getBlockPalette(void)const;
    virtual void `non-virtual thunk to'Level::getBlockPalette(void);
    virtual void `non-virtual thunk to'Level::getFeatureRegistry(void)const;
    virtual void `non-virtual thunk to'Level::getFeatureRegistry(void);
    virtual void `non-virtual thunk to'Level::getFeatureTypeFactory(void)const;
    virtual void `non-virtual thunk to'Level::getFeatureTypeFactory(void);
    virtual void `non-virtual thunk to'Level::getJigsawStructureRegistry(void)const;
    virtual void `non-virtual thunk to'Level::getJigsawStructureRegistry(void);
    virtual void `non-virtual thunk to'Level::getStructureManager(void);
    virtual void `non-virtual thunk to'Level::getBiomeComponentFactory(void)const;
    virtual void `non-virtual thunk to'Level::getBiomeComponentFactory(void);
    virtual void `non-virtual thunk to'Level::getSurfaceBuilderRegistry(void)const;
    virtual void `non-virtual thunk to'Level::getSurfaceBuilderRegistry(void);
    virtual void `non-virtual thunk to'Level::getDimensionFactory(void)const;
    virtual void `non-virtual thunk to'Level::getDimensionFactory(void);
}
