#pragma once

class ServerLevel : Level {

    virtual void Server~ServerLevel();
    virtual void Server~ServerLevel();
    virtual void onSourceCreated(BlockSource &);
    virtual void onSourceDestroyed(BlockSource &);
    virtual void BlockSourceListener::onAreaChanged(BlockSource &, BlockPos const&, BlockPos const&);
    virtual void BlockSourceListener::onBlockChanged(BlockSource &, BlockPos const&, unsigned int, Block const&, Block const&, int, ActorBlockSyncMessage const*);
    virtual void BlockSourceListener::onBrightnessChanged(BlockSource &, BlockPos const&);
    virtual void BlockSourceListener::onBlockEntityChanged(BlockSource &, BlockActor &);
    virtual void BlockSourceListener::onBlockEntityAboutToBeRemoved(BlockSource &, std::shared_ptr<BlockActor>);
    virtual void BlockSourceListener::onEntityChanged(BlockSource &, Actor &);
    virtual void BlockSourceListener::onBlockEvent(BlockSource &, int, int, int, int, int);
    virtual void Serverinitialize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, LevelSettings const&, LevelData *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const*);
    virtual void startLeaveGame(void);
    virtual void addEntity(BlockSource &, std::unique_ptr<Actor, std::default_delete<Actor>>);
    virtual void addGlobalEntity(BlockSource &, std::unique_ptr<Actor, std::default_delete<Actor>>);
    virtual void addAutonomousEntity(BlockSource &, std::unique_ptr<Actor, std::default_delete<Actor>>);
    virtual void addPlayer(std::unique_ptr<Player, std::default_delete<Player>>);
    virtual void takeEntity(ActorUniqueID);
    virtual void borrowEntity(ActorUniqueID, LevelChunk *);
    virtual void getCurrentServerTick(void)const;
    virtual void getBiomeRegistry(void)const;
    virtual void getBiomeRegistry(void);
    virtual void getBlockPalette(void)const;
    virtual void getBlockPalette(void);
    virtual void getFeatureRegistry(void)const;
    virtual void getFeatureRegistry(void);
    virtual void getFeatureTypeFactory(void)const;
    virtual void getFeatureTypeFactory(void);
    virtual void getJigsawStructureRegistry(void)const;
    virtual void getJigsawStructureRegistry(void);
    virtual void getStructureManager(void);
    virtual void getStructureManager(void)const;
    virtual void getBiomeComponentFactory(void)const;
    virtual void getBiomeComponentFactory(void);
    virtual void getSurfaceBuilderRegistry(void)const;
    virtual void getSurfaceBuilderRegistry(void);
    virtual void getDimensionFactory(void)const;
    virtual void getDimensionFactory(void);
    virtual void onPlayerDeath(Player &, ActorDamageSource const&);
    virtual void Servertick(void);
    virtual void directTickEntities(BlockSource &);
    virtual void ServerupdateSleepingPlayerList(void);
    virtual void ServersetDifficulty(Difficulty);
    virtual void ServersetCommandsEnabled(bool);
    virtual void ServersetWorldTemplateOptionsUnlocked(void);
    virtual void ServersaveAdditionalData(void);
    virtual void ServergetLevelEventCoordinator(void);
    virtual void onNewChunk(BlockSource &, LevelChunk &);
    virtual void onNewChunkFor(Player &, LevelChunk &);
    virtual void onChunkLoaded(LevelChunk &);
    virtual void queueEntityRemoval(std::unique_ptr<Actor, std::default_delete<Actor>> &&, bool);
    virtual void removeEntityReferences(Actor &, bool);
    virtual void ServerloadFunctionManager(void);
    virtual void ServergetClientResourcePackManager(void)const;
    virtual void ServergetServerResourcePackManager(void)const;
    virtual void ServergetTradeTables(void);
    virtual void ServeraddEntryToTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void ServerdropEntryFromTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void ServerclearTagCache(void);
    virtual void ServerdecrementTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, TagRegistry &);
    virtual void ServerincrementTagCache(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, TagRegistry &);
    virtual void ServerrunCommand(HashedString const&, CommandOrigin &, CommandOriginSystem, CurrentCmdVersion);
    virtual void getTagRegistry(void);
    virtual void setFinishedInitializing(void);
    virtual void ;
    virtual void `non-virtual thunk to'Server~ServerLevel();
    virtual void `non-virtual thunk to'Server~ServerLevel();
    virtual void `non-virtual thunk to'getBiomeRegistry(void)const;
    virtual void `non-virtual thunk to'getBiomeRegistry(void);
    virtual void `non-virtual thunk to'getBlockPalette(void)const;
    virtual void `non-virtual thunk to'getBlockPalette(void);
    virtual void `non-virtual thunk to'getFeatureRegistry(void)const;
    virtual void `non-virtual thunk to'getFeatureRegistry(void);
    virtual void `non-virtual thunk to'getFeatureTypeFactory(void)const;
    virtual void `non-virtual thunk to'getFeatureTypeFactory(void);
    virtual void `non-virtual thunk to'getJigsawStructureRegistry(void)const;
    virtual void `non-virtual thunk to'getJigsawStructureRegistry(void);
    virtual void `non-virtual thunk to'getStructureManager(void);
    virtual void `non-virtual thunk to'getBiomeComponentFactory(void)const;
    virtual void `non-virtual thunk to'getBiomeComponentFactory(void);
    virtual void `non-virtual thunk to'getSurfaceBuilderRegistry(void)const;
    virtual void `non-virtual thunk to'getSurfaceBuilderRegistry(void);
    virtual void `non-virtual thunk to'getDimensionFactory(void)const;
    virtual void `non-virtual thunk to'getDimensionFactory(void);
}
