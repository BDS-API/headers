#pragma once

class Player : Mob {

    virtual void reloadHardcoded(Actor::InitializationMethod, VariantParameterList const&);
    virtual void reloadHardcodedClient(Actor::InitializationMethod, VariantParameterList const&);
    virtual void initializeComponents(Actor::InitializationMethod, VariantParameterList const&);
    virtual void Actor::reloadComponents(Actor::InitializationMethod, VariantParameterList const&);
    virtual void hasComponent(Util::HashString const&)const;
    virtual void ~Player();
    virtual void ~Player();
    virtual void Actor::reset(void);
    virtual void Actor::getOnDeathExperience(void);
    virtual void Actor::getOwnerEntityType(void);
    virtual void remove(void);
    virtual void Actor::setPos(Vec3 const&);
    virtual void Actor::getPos(void)const;
    virtual void Actor::getPosOld(void)const;
    virtual void Actor::getPosExtrapolated(float)const;
    virtual void getAttachPos(ActorLocation, float)const;
    virtual void Actor::getFiringPos(void)const;
    virtual void Actor::setRot(Vec2 const&);
    virtual void move(Vec3 const&);
    virtual void Actor::getInterpolatedRidingPosition(float)const;
    virtual void getInterpolatedBodyRot(float)const;
    virtual void getInterpolatedHeadRot(float)const;
    virtual void getInterpolatedBodyYaw(float)const;
    virtual void getYawSpeedInDegreesPerSecond(void)const;
    virtual void Actor::getInterpolatedWalkAnimSpeed(float)const;
    virtual void Actor::getInterpolatedRidingOffset(float)const;
    virtual void Actor::checkBlockCollisions(AABB const&);
    virtual void Actor::checkBlockCollisions(void);
    virtual void Actor::breaksFallingBlocks(void)const;
    virtual void blockedByShield(ActorDamageSource const&, Actor &);
    virtual void Actor::moveRelative(float, float, float, float);
    virtual void teleportTo(Vec3 const&, bool, int, int);
    virtual void Actor::tryTeleportTo(Vec3 const&, bool, bool, int, int);
    virtual void Actor::chorusFruitTeleport(Vec3 &);
    virtual void lerpTo(Vec3 const&, Vec2 const&, int);
    virtual void Actor::lerpMotion(Vec3 const&);
    virtual void getAddPacket(void);
    virtual void normalTick(void);
    virtual void baseTick(void);
    virtual void rideTick(void);
    virtual void Actor::positionRider(Actor&, float);
    virtual void getRidingHeight(void);
    virtual void startRiding(Actor &);
    virtual void addRider(Actor &);
    virtual void Actor::flagRiderToRemove(Actor&);
    virtual void Actor::getExitTip(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, InputMode)const;
    virtual void Actor::intersects(Vec3 const&, Vec3 const&)const;
    virtual void Actor::isFree(Vec3 const&, float);
    virtual void Actor::isFree(Vec3 const&);
    virtual void Actor::isInWall(void)const;
    virtual void Actor::isInvisible(void)const;
    virtual void Actor::canShowNameTag(void)const;
    virtual void Actor::canExistInPeaceful(void)const;
    virtual void Actor::setNameTagVisible(bool);
    virtual void _ZNK5Actor10getNameTagB5cxx11Ev;
    virtual void Actor::getNameTagAsHash(void)const;
    virtual void _ZNK6Player19getFormattedNameTagB5cxx11Ev;
    virtual void Actor::filterFormattedNameTag(UIProfanityContext const&);
    virtual void Actor::setNameTag(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void getAlwaysShowNameTag(void)const;
    virtual void Actor::setScoreTag(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void _ZNK5Actor11getScoreTagB5cxx11Ev;
    virtual void Actor::isInWater(void)const;
    virtual void Actor::hasEnteredWater(void)const;
    virtual void Actor::isImmersedInWater(void)const;
    virtual void Actor::isInWaterOrRain(void)const;
    virtual void Actor::isInLava(void)const;
    virtual void Actor::isUnderLiquid(MaterialType)const;
    virtual void Actor::isOverWater(void)const;
    virtual void Actor::makeStuckInBlock(float);
    virtual void getCameraOffset(void)const;
    virtual void Actor::getShadowHeightOffs(void);
    virtual void Actor::getShadowRadius(void)const;
    virtual void Actor::getHeadLookVector(float);
    virtual void Actor::canSeeInvisible(void)const;
    virtual void Actor::canSee(Actor const&)const;
    virtual void Actor::canSee(Vec3 const&)const;
    virtual void Actor::isSkyLit(float);
    virtual void Actor::getBrightness(float)const;
    virtual void Actor::interactPreventDefault(void);
    virtual void playerTouch(Player &);
    virtual void Actor::onAboveBubbleColumn(bool);
    virtual void Actor::onInsideBubbleColumn(bool);
    virtual void isImmobile(void)const;
    virtual void Actor::isSilent(void);
    virtual void isPickable(void);
    virtual void Actor::isFishable(void)const;
    virtual void isSleeping(void)const;
    virtual void isShootable(void);
    virtual void Actor::isSneaking(void)const;
    virtual void Actor::setSneaking(bool);
    virtual void isBlocking(void)const;
    virtual void isDamageBlocked(ActorDamageSource const&)const;
    virtual void isAlive(void)const;
    virtual void Actor::isOnFire(void)const;
    virtual void Actor::isOnHotBlock(void)const;
    virtual void isCreativeModeAllowed(void);
    virtual void isSurfaceMob(void)const;
    virtual void Actor::isTargetable(void)const;
    virtual void Actor::canAttack(Actor*, bool)const;
    virtual void setTarget(Actor *);
    virtual void Actor::findAttackTarget(void);
    virtual void Actor::isValidTarget(Actor*)const;
    virtual void attack(Actor &);
    virtual void Actor::performRangedAttack(Actor&, float);
    virtual void adjustDamageAmount(int &)const;
    virtual void Actor::getEquipmentCount(void)const;
    virtual void Actor::setOwner(ActorUniqueID);
    virtual void Actor::setSitting(bool);
    virtual void Actor::onTame(void);
    virtual void Actor::onFailedTame(void);
    virtual void Actor::getInventorySize(void)const;
    virtual void Actor::getEquipSlots(void)const;
    virtual void Actor::getChestSlots(void)const;
    virtual void Actor::setStanding(bool);
    virtual void canPowerJump(void)const;
    virtual void Actor::setCanPowerJump(bool);
    virtual void isJumping(void)const;
    virtual void Actor::isEnchanted(void)const;
    virtual void Actor::rideJumped(void);
    virtual void Actor::rideLanded(Vec3 const&, Vec3 const&);
    virtual void Actor::shouldRender(void)const;
    virtual void isInvulnerableTo(ActorDamageSource const&)const;
    virtual void actuallyHurt(int, ActorDamageSource const*, bool);
    virtual void animateHurt(void);
    virtual void doFireHurt(int);
    virtual void Actor::onLightningHit(void);
    virtual void onBounceStarted(BlockPos const&, Block const&);
    virtual void feed(int);
    virtual void handleEntityEvent(ActorEvent, int);
    virtual void Actor::getPickRadius(void);
    virtual void Actor::spawnAtLocation(int, int);
    virtual void Actor::spawnAtLocation(int, int, float);
    virtual void Actor::spawnAtLocation(Block const&, int);
    virtual void Actor::spawnAtLocation(Block const&, int, float);
    virtual void Actor::spawnAtLocation(ItemStack const&, float);
    virtual void Actor::despawn(void);
    virtual void Actor::killed(Actor&);
    virtual void awardKillScore(Actor &, int);
    virtual void setArmor(ArmorSlot, ItemStack const&);
    virtual void Actor::getArmor(ArmorSlot)const;
    virtual void getArmorMaterialTypeInSlot(ArmorSlot)const;
    virtual void getArmorMaterialTextureTypeInSlot(ArmorSlot)const;
    virtual void getArmorColorInSlot(ArmorSlot, int)const;
    virtual void setEquippedSlot(ArmorSlot, int, int);
    virtual void setEquippedSlot(ArmorSlot, ItemStack const&);
    virtual void getCarriedItem(void)const;
    virtual void setCarriedItem(ItemStack const&);
    virtual void setOffhandSlot(ItemStack const&);
    virtual void getEquippedTotem(void)const;
    virtual void consumeTotem(void);
    virtual void Actor::save(CompoundTag &);
    virtual void Actor::saveWithoutId(CompoundTag &);
    virtual void Actor::load(CompoundTag const&, DataLoadHelper &);
    virtual void Actor::loadLinks(CompoundTag const&, std::vector<ActorLink, std::allocator<ActorLink>> &, DataLoadHelper &);
    virtual void getEntityTypeId(void)const;
    virtual void Actor::queryEntityRenderer(void)const;
    virtual void Actor::getSourceUniqueID(void)const;
    virtual void setOnFire(int);
    virtual void Actor::getHandleWaterAABB(void)const;
    virtual void Actor::handleInsidePortal(BlockPos const&);
    virtual void getPortalCooldown(void)const;
    virtual void getPortalWaitTime(void)const;
    virtual void Actor::getDimensionId(void)const;
    virtual void Actor::canChangeDimensions(void)const;
    virtual void Actor::changeDimension(AutomaticID<Dimension, int>, bool);
    virtual void Actor::changeDimension(ChangeDimensionPacket const&);
    virtual void Actor::getControllingPlayer(void)const;
    virtual void Actor::checkFallDamage(float, bool);
    virtual void causeFallDamage(float);
    virtual void Actor::handleFallDistanceOnServer(float, bool);
    virtual void Actor::playSynchronizedSound(LevelSoundEvent, Vec3 const&, Block const&, bool);
    virtual void Actor::playSynchronizedSound(LevelSoundEvent, Vec3 const&, int, bool);
    virtual void onSynchedDataUpdate(int);
    virtual void canAddRider(Actor &)const;
    virtual void canBePulledIntoVehicle(void)const;
    virtual void inCaravan(void)const;
    virtual void Actor::isLeashableType(void);
    virtual void Actor::tickLeash(void);
    virtual void sendMotionPacketIfNeeded(void);
    virtual void Actor::canSynchronizeNewEntity(void)const;
    virtual void stopRiding(bool, bool, bool);
    virtual void startSwimming(void);
    virtual void stopSwimming(void);
    virtual void buildDebugInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &)const;
    virtual void getCommandPermissionLevel(void)const;
    virtual void Actor::getMutableAttribute(Attribute const&);
    virtual void Actor::getAttribute(Attribute const&)const;
    virtual void getDeathTime(void)const;
    virtual void Actor::heal(int);
    virtual void Actor::isInvertedHealAndHarm(void)const;
    virtual void Actor::canBeAffected(int)const;
    virtual void Actor::canBeAffected(MobEffectInstance const&)const;
    virtual void Actor::canBeAffectedByArrow(MobEffectInstance const&)const;
    virtual void Actor::onEffectAdded(MobEffectInstance &);
    virtual void Actor::onEffectUpdated(MobEffectInstance const&);
    virtual void Actor::onEffectRemoved(MobEffectInstance &);
    virtual void getAnimationComponent(void);
    virtual void Actor::openContainerComponent(Player &);
    virtual void swing(void);
    virtual void useItem(ItemStack &, ItemUseMethod, bool);
    virtual void Actor::hasOutputSignal(unsigned char)const;
    virtual void Actor::getOutputSignal(void)const;
    virtual void Actor::getDebugText(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> &);
    virtual void getMapDecorationRotation(void)const;
    virtual void Actor::getRiderYRotation(Actor const&)const;
    virtual void getYHeadRot(void)const;
    virtual void isWorldBuilder(void);
    virtual void isCreative(void)const;
    virtual void isAdventure(void)const;
    virtual void add(ItemStack &);
    virtual void drop(ItemStack const&, bool);
    virtual void Actor::getInteraction(Player &, ActorInteraction &, Vec3 const&);
    virtual void Actor::canDestroyBlock(Block const&)const;
    virtual void Actor::setAuxValue(int);
    virtual void Actor::setSize(float, float);
    virtual void Actor::getLifeSpan(void)const;
    virtual void Actor::onOrphan(void);
    virtual void Actor::wobble(void);
    virtual void Actor::wasHurt(void);
    virtual void startSpinAttack(void);
    virtual void stopSpinAttack(void);
    virtual void Actor::setDamageNearbyMobs(bool);
    virtual void renderDebugServerState(Options const&);
    virtual void Actor::reloadLootTable(void);
    virtual void Actor::reloadLootTable(EquipmentTableDescription const*);
    virtual void Actor::getDeletionDelayTimeSeconds(void)const;
    virtual void kill(void);
    virtual void die(ActorDamageSource const&);
    virtual void Actor::shouldTick(void)const;
    virtual void updateEntitySpecificMolangVariables(RenderParams &);
    virtual void Actor::canMakeStepSound(void)const;
    virtual void outOfWorld(void);
    virtual void _hurt(ActorDamageSource const&, int, bool, bool);
    virtual void Actor::markHurt(void);
    virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper &);
    virtual void addAdditionalSaveData(CompoundTag &);
    virtual void _playStepSound(BlockPos const&, Block const&);
    virtual void Actor::_playFlySound(BlockPos const&, Block const&);
    virtual void Actor::_makeFlySound(void)const;
    virtual void Actor::checkInsideBlocks(float);
    virtual void Actor::pushOutOfBlocks(Vec3 const&);
    virtual void Actor::updateWaterState(void);
    virtual void Actor::doWaterSplashEffect(void);
    virtual void Actor::spawnTrailBubbles(void);
    virtual void Actor::updateInsideBlock(void);
    virtual void Actor::getLootTable(void);
    virtual void Actor::getDefaultLootTable(void);
    virtual void _removeRider(ActorUniqueID const&, bool, bool);
    virtual void _onSizeUpdated(void);
    virtual void Actor::_doAutoAttackOnTouch(Actor&);
    virtual void knockback(Actor *, int, float, float, float, float, float);
    virtual void resolveDeathLoot(int, ActorDamageSource const&);
    virtual void spawnAnim(void);
    virtual void setSleeping(bool);
    virtual void isSprinting(void)const;
    virtual void setSprinting(bool);
    virtual void playAmbientSound(void);
    virtual void getAmbientSound(void);
    virtual void getAmbientSoundPostponeTicks(void);
    virtual void getItemInHandIcon(ItemStack const&, int);
    virtual void getSpeed(void)const;
    virtual void setSpeed(float);
    virtual void getJumpPower(void)const;
    virtual void hurtEffects(ActorDamageSource const&, int, bool, bool);
    virtual void getMeleeWeaponDamageBonus(Mob*);
    virtual void getMeleeKnockbackBonus(void);
    virtual void travel(float, float, float);
    virtual void applyFinalFriction(float, bool);
    virtual void updateWalkAnim(void);
    virtual void aiStep(void);
    virtual void pushActors(void);
    virtual void lookAt(Actor *, float, float);
    virtual void isLookingAtAnEntity(void);
    virtual void checkSpawnRules(bool);
    virtual void checkSpawnObstruction(void)const;
    virtual void shouldDespawn(void)const;
    virtual void getAttackAnim(float);
    virtual void getItemUseDuration(void);
    virtual void getItemUseStartupProgress(void);
    virtual void getItemUseIntervalProgress(void);
    virtual void getItemuseIntervalAxis(void);
    virtual void getTimeAlongSwing(void);
    virtual void ate(void);
    virtual void getMaxHeadXRot(void);
    virtual void getLastHurtByMob(void);
    virtual void setLastHurtByMob(Mob*);
    virtual void getLastHurtByPlayer(void);
    virtual void setLastHurtByPlayer(Player *);
    virtual void getLastHurtMob(void);
    virtual void setLastHurtMob(Actor *);
    virtual void isAlliedTo(Mob*);
    virtual void doHurtTarget(Actor *);
    virtual void canBeControlledByRider(void);
    virtual void leaveCaravan(void);
    virtual void joinCaravan(Mob*);
    virtual void hasCaravanTail(void)const;
    virtual void getCaravanHead(void)const;
    virtual void getArmorValue(void);
    virtual void getArmorCoverPercentage(void)const;
    virtual void hurtArmor(int);
    virtual void containerChanged(int);
    virtual void updateEquipment(void);
    virtual void clearEquipment(void);
    virtual void getAllArmor(void)const;
    virtual void getAllArmorID(void)const;
    virtual void getAllHand(void)const;
    virtual void getAllEquipment(void)const;
    virtual void getArmorTypeHash(void);
    virtual void sendInventory(bool);
    virtual void sendArmor(void);
    virtual void getDamageAfterMagicAbsorb(ActorDamageSource const&, int);
    virtual void createAIGoals(void);
    virtual void onBorn(Actor &, Actor &);
    virtual void setItemSlot(EquipmentSlot, ItemStack const&);
    virtual void goDownInWater(void);
    virtual void setTransitioningSitting(bool);
    virtual void attackAnimation(Actor *, float);
    virtual void getAttackTime(void);
    virtual void _getWalkTargetValue(BlockPos const&);
    virtual void canExistWhenDisallowMob(void)const;
    virtual void useNewAi(void)const;
    virtual void ascendLadder(void);
    virtual void ascendScaffolding(void);
    virtual void descendScaffolding(void);
    virtual void initBodyControl(void);
    virtual void jumpFromGround(void);
    virtual void updateAi(void);
    virtual void newServerAiStep(void);
    virtual void _serverAiMobStep(void);
    virtual void getDamageAfterEnchantReduction(ActorDamageSource const&, int);
    virtual void getDamageAfterArmorAbsorb(ActorDamageSource const&, int);
    virtual void dropEquipment(ActorDamageSource const&, int);
    virtual void dropEquipment(void);
    virtual void dropBags(void);
    virtual void dropContainer(void);
    virtual void tickDeath(void);
    virtual void _endJump(void);
    virtual void updateGliding(void);
    virtual void _allowAscendingScaffolding(void)const;
    virtual void prepareRegion(ChunkSource &);
    virtual void destroyRegion(void);
    virtual void suspendRegion(void);
    virtual void _fireWillChangeDimension(void);
    virtual void _fireDimensionChanged(void);
    virtual void changeDimensionWithCredits(AutomaticID<Dimension, int>);
    virtual void tickWorld(Tick const&);
    virtual void frameUpdate(FrameUpdateContextBase &);
    virtual void getTickingOffsets(void)const;
    virtual void moveView(void);
    virtual void moveSpawnView(Vec3 const&);
    virtual void setName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void checkMovementStats(Vec3 const&);
    virtual void getCurrentStructureFeature(void)const;
    virtual void isAutoJumpEnabled(void)const;
    virtual void respawn(void);
    virtual void resetRot(void);
    virtual void resetPos(bool);
    virtual void isInTrialMode(void);
    virtual void hasResource(int);
    virtual void completeUsingItem(void);
    virtual void setPermissions(CommandPermissionLevel);
    virtual void startCrafting(BlockPos const&, bool);
    virtual void startStonecutting(BlockPos const&);
    virtual void startDestroying(void);
    virtual void stopDestroying(void);
    virtual void openContainer(BlockPos const&);
    virtual void openContainer(ActorUniqueID const&);
    virtual void openFurnace(BlockPos const&);
    virtual void openBlastFurnace(BlockPos const&);
    virtual void openSmoker(BlockPos const&);
    virtual void openEnchanter(BlockPos const&);
    virtual void openAnvil(BlockPos const&);
    virtual void openGrindstone(BlockPos const&);
    virtual void openBrewingStand(BlockPos const&);
    virtual void openHopper(BlockPos const&);
    virtual void openHopper(ActorUniqueID const&);
    virtual void openDispenser(BlockPos const&, bool);
    virtual void openBeacon(BlockPos const&);
    virtual void openPortfolio(void);
    virtual void openBook(int, bool, int, BlockActor *);
    virtual void openCommandBlock(BlockPos const&);
    virtual void openCommandBlockMinecart(ActorUniqueID const&);
    virtual void openHorseInventory(ActorUniqueID const&);
    virtual void openTrading(ActorUniqueID const&, bool);
    virtual void canOpenContainerScreen(void);
    virtual void openChalkboard(ChalkboardBlockActor &, bool);
    virtual void openNpcInteractScreen(Actor &);
    virtual void openInventory(void);
    virtual void openStructureEditor(BlockPos const&);
    virtual void openLabTable(BlockPos const&);
    virtual void openElementConstructor(BlockPos const&);
    virtual void openCompoundCreator(BlockPos const&);
    virtual void openMaterialReducer(BlockPos const&);
    virtual void openLoom(BlockPos const&);
    virtual void openStonecutter(BlockPos const&);
    virtual void openCartographyTable(BlockPos const&);
    virtual void displayChatMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void displayClientMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void displayLocalizableMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&);
    virtual void displayTextObjectMessage(TextObjectRoot const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void displayWhisperMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void startSleepInBed(BlockPos const&);
    virtual void stopSleepInBed(bool, bool);
    virtual void canStartSleepInBed(void);
    virtual void getSleepTimer(void)const;
    virtual void getPreviousTickSleepTimer(void)const;
    virtual void openSign(BlockPos const&);
    virtual void playEmote(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, bool);
    virtual void isLocalPlayer(void)const;
    virtual void isHostingPlayer(void)const;
    virtual void isLoading(void)const;
    virtual void isPlayerInitialized(void)const;
    virtual void stopLoading(void);
    virtual void registerTrackedBoss(ActorUniqueID);
    virtual void unRegisterTrackedBoss(ActorUniqueID);
    virtual void setPlayerGameType(GameType);
    virtual void _crit(Actor &);
    virtual void getEventing(void)const;
    virtual void getUserId(void)const;
    virtual void sendEventPacket(EventPacket &)const;
    virtual void addExperience(int);
    virtual void addLevels(int);
    virtual void setContainerData(IContainerManager &, int, int);
    virtual void slotChanged(IContainerManager &, int, ItemStack const&, ItemStack const&, bool);
    virtual void inventoryChanged(Container &, int, ItemStack const&, ItemStack const&);
    virtual void refreshContainer(IContainerManager &);
    virtual void deleteContainerManager(void);
    virtual void setFieldOfViewModifier(float);
    virtual void isPositionRelevant(AutomaticID<Dimension, int>, BlockPos const&);
    virtual void isEntityRelevant(Actor const&);
    virtual void isTeacher(void)const;
    virtual void onSuspension(void);
    virtual void onLinkedSlotsChanged(void);
    virtual void startCooldown(Item const*);
    virtual void getItemCooldownLeft(CooldownType)const;
    virtual void isItemInCooldown(CooldownType)const;
    virtual void sendInventoryTransaction(InventoryTransaction const&)const;
    virtual void sendComplexInventoryTransaction(std::unique_ptr<ComplexInventoryTransaction, std::default_delete<ComplexInventoryTransaction>>)const;
    virtual void sendNetworkPacket(Packet &)const;
    virtual void getPlayerEventCoordinator(void);
    virtual void getMoveInputHandler(void);
    virtual void getInputMode(void)const;
    virtual void getPlayMode(void)const;
    virtual void reportMovementTelemetry(MovementEventType);
    virtual void onMovePlayerPacketNormal(Vec3 const&, Vec2 const&, float);
}
