#pragma once

class Village {

public:
    static long Village::VILLAGE_VERSION_CURRENT;
    static long Village::VILLAGE_START_XZ_BOUNDS;
    static long Village::VILLAGE_START_HEIGHT;
    static long Village::VILLAGE_UNCLAIMED_POI_CAP;
    static long Village::VILLAGE_POI_PURGE_TIME;
    static long Village::VILLAGE_RADIUS_APPROX_SCALAR;
    static long Village::RAID_PREP_TIME_IN_TICKS;
    static long Village::RAID_GROUP_COMPLETE_DELAY_IN_TICKS;
    static long Village::RAID_LOCATION_HELP_DELAY_IN_TICKS;
    static long Village::RAID_MAX_SPAWN_FAILURES;
    static long Village::VILLAGE_HERO_EFFECT_DURATION;
    static long Village::VILLAGE_HERO_BESTOW_TIME;
    static long Village::ACHIEVEMENT_SOUND_THE_ALARM_TOLERANCE;
    static long Village::VILLAGE_UPDATE_TICK_DELAY;
    static long Village::VILLAGE_SAVE_TICK_DELAY;
    static long Village::RAID_BOUNDS_PADDING;
    static long Village::UNINITIALIZED_VILLAGE_LIFETIME_MAX_TICKS;
    static long Village::DEBUG_DRAWING;
    static long Village::RAID_TIMEOUT_IN_TICKS;


    void _sendSoundTheAlarmAchievement(Player const&)const;
    void _addPoiToVillage(ActorUniqueID const&, std::weak_ptr<POIInstance>);
    void _calcPOIDist(void);
    void Village(Dimension &, mce::UUID, BlockPos const&);
    void _setDefaultBoundsAround(BlockPos const&);
    void getBounds(void)const;
    void getRaidBounds(void)const;
    void tick(Tick, BlockSource &);
    void _updateAggressors(void);
    void _updateDwellerTimers(void);
    void _updateClaimedPOIs(BlockSource &);
    void _shouldUpdate(void)const;
    void _updateUnclaimedPOIs(BlockSource &);
    void _claimUnclaimedPOIs(void);
    void getBedPOICount(void)const;
    void getPopulationSize(void)const;
    void _getDwellerMap(DwellerRole);
    void findRandomSpawnPos(BlockSource &, BlockPos const&, BlockPos const&);
    void getCenter(void)const;
    void addActorToVillage(DwellerRole, ActorUniqueID const&);
    void _spawnPassiveDwellers(BlockSource &, int);
    void _ringBells(BlockSource &, Random &)const;
    bool isVillageHeroActive(void)const;
    void _applyHeroOfTheVillageEffect(BlockSource &, AABB const&);
    void _shouldSave(void)const;
    void saveEntireVillage(void);
    void debugDraw(void);
    void getUniqueID(void)const;
    void withinVillageBounds(Vec3 const&, float)const;
    bool canSpawnAt(BlockSource &, BlockPos const&, BlockPos const&);
    bool canSpawnAt(BlockSource &, int, int, int, int, int, int);
    void getApproximateRadius(void)const;
    void getPOICount(void)const;
    void getDwellerRoleCount(DwellerRole)const;
    void getIdealPopulationSize(void)const;
    void checkNeedMoreVillagers(void)const;
    bool isBreedTimerOk(void)const;
    void getUnclaimedPOIs(void)const;
    void fetchOwnedPOI(ActorUniqueID const&, POIType);
    void clearOwnedPOIs(void);
    void removeVillageSavedData(void);
    bool canAddPOI(std::weak_ptr<POIInstance>)const;
    bool hasPOI(std::weak_ptr<POIInstance>)const;
    void addPOI(std::weak_ptr<POIInstance>);
    void addVillager(ActorUniqueID const&);
    void removeActorFromVillage(DwellerRole, ActorUniqueID const&);
    void removeVillager(ActorUniqueID const&);
    void removeAllInstancesofActorFromVillage(ActorUniqueID const&);
    void _clearVillagerPOIs(ActorUniqueID const&);
    bool hasSpecificDweller(DwellerRole, ActorUniqueID const&)const;
    void _getDwellerMap(DwellerRole)const;
    void _findAvailablePOI(unsigned long, Level &, Random &, ActorUniqueID);
    void _findPreferredPOI(std::vector<std::weak_ptr<POIInstance>, std::allocator<std::weak_ptr<POIInstance>>> &, HashedString const&, ActorUniqueID);
    void _findWeightedPOI(std::vector<std::weak_ptr<POIInstance>, std::allocator<std::weak_ptr<POIInstance>>> &, Random &, ActorUniqueID);
    void _getType(POIType);
    void _findClosestDweller(Actor *, Actor *&, float &, std::unordered_map<ActorUniqueID, Tick, std::hash<ActorUniqueID>, std::equal_to<ActorUniqueID>, std::allocator<std::pair<ActorUniqueID const, Tick>>> const&)const;
    void _createRaid(void);
    void _sendRaidUpdateToPlayersInVillage(bool)const;
    void _findSpawnableRegion(Vec3, int)const;
    void _findSpawnableRegion(Vec3, int, bool &)const;
    void _chooseRaidSpawnPosition(unsigned long, Vec3 &)const;
    void _findSpawnPointForRaid(Vec3 &, float, float, bool, bool)const;
    void _findPlayerCentricSpawnPointForRaid(Vec3 &, bool)const;
    void _chooseRandomDirectionFromVillage(Random &)const;
    void _chooseRandomPosAtDistance(Random &, Vec3 const&, float)const;
    void _spawnAndReadyRaidGroup(unsigned long, Vec3, unsigned char, std::unordered_set<ActorUniqueID, std::hash<ActorUniqueID>, std::equal_to<ActorUniqueID>, std::allocator<ActorUniqueID>> &);
    void _spawnRaidGroup(Vec3, unsigned char, std::unordered_set<ActorUniqueID, std::hash<ActorUniqueID>, std::equal_to<ActorUniqueID>, std::allocator<ActorUniqueID>> &)const;
    void _readyRaidGroup(std::unordered_set<ActorUniqueID, std::hash<ActorUniqueID>, std::equal_to<ActorUniqueID>, std::allocator<ActorUniqueID>> &);
    void loadDataByKey(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, CompoundTag const&);
    void _loadVillageData(CompoundTag const&);
    void _loadVillagePlayerStanding(CompoundTag const&);
    void _loadVillageDwellers(CompoundTag const&);
    void _loadVillagePOIs(CompoundTag const&);
    void _loadVillageRaid(CompoundTag const&);
    void _saveVillageData(void)const;
    void _saveVillagePlayerStanding(void)const;
    void _saveVillageDwellers(void)const;
    void _saveVillagePOIs(void)const;
    void _saveVillageRaid(void)const;
    void _helpLocateRaiders(Raid const&);
    void _playSoundFrom(Vec3 const&, LevelSoundEvent);
    void villagerLivesHere(ActorUniqueID const&)const;
    void onRemovedFromManager(void);
    bool canRemove(void)const;
    void addAggressor(Mob const&);
    void getClosestAggressor(Actor *);
    bool hasAggressors(void)const;
    void getClosestBadStandingPlayer(Actor *);
    bool isVeryBadStanding(ActorUniqueID const&);
    void getClosestPOI(POIType, BlockPos const&);
    bool isVillagePOI(BlockSource const&, BlockPos const&);
    bool isValidRegisteredPOI(BlockSource &, BlockPos const&);
    bool hasInvalidRole(ActorUniqueID const&, DwellerRole const&);
    void getStanding(ActorUniqueID const&);
    void modifyStanding(ActorUniqueID const&, int);
    bool isGoodStanding(ActorUniqueID const&);
    bool isBadStanding(ActorUniqueID const&);
    void rewardAllPlayers(int);
    void resetNoBreedTimer(void);
    void startVillageHeroTimer(void);
    void resetDwellerTimer(DwellerRole, ActorUniqueID const&);
    void triggerRaid(void);
    bool hasRaid(void)const;
    void getRaid(void)const;
    void clearRaid(void);
    void fireSoundTheAlarm(void);
    bool isVillagePOI(VillageManager const&, Block const&);
    bool isValidBedPOI(Block const&);
    bool isValidRegisteredPOI(BlockSource &, Block const&, BlockPos const&);
};
