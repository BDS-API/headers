#pragma once

class Util {

public:
    static long Util::COLOR_CODE;


    void compress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&);
    void decompress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&);
    void removeIllegalChars(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>);
    void removeChars(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stripQueryParametersFromUrl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stripProtocolFromUrl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stringIsInVector(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void trimVectorStrings(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> &);
    void hashCode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void removeAllColorCodes(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void span_find(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>);
    void utf8lenDelta(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void utf8lenNoColorCodes(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void utf8substring(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int, int);
    void appendUtf8Character(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, int);
    void replaceSingleUtf8CharacterWithAscii(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, char);
    void replaceUtf8CharactersWithAscii(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, char>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, char>>> const&);
    void simpleFormat(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&);
    bool isIntegral(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>);
    void urlEncode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void freeStringMemory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &);
    void countWordOccurrences(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>);
    bool isValidPath(gsl::basic_string_span<char const, -1l>);
    void splitString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, char, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> &);
    void stringContains(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, char);
    void toInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int &, int, int);
    void toBool(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, bool &);
    void anonymizeIPAddress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    bool isValidIPv4(gsl::basic_string_span<char const, -1l>);
    bool isValidIPv6(gsl::basic_string_span<char const, -1l>);
    void anonymizeIPv6Address(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    bool isValidIP(gsl::basic_string_span<char const, -1l>, bool, bool);
    bool isValidIPAndPort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int);
    void _recordProfanityLocationInWord(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int>>> const&, int, int, std::set<std::pair<int, int>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>> &, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, int>>> const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&);
    void _breakIntoWordsAndFindProfanity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int>>> const&, std::unordered_set<char, std::hash<char>, std::equal_to<char>, std::allocator<char>> const&, std::set<std::pair<int, int>, std::less<std::pair<int, int>>, std::allocator<std::pair<int, int>>> &, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, int>>> const&, std::unordered_set const&<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>);
    void filterProfanityFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, int>>> const&, std::unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&);
    bool isNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    bool isNumberStringGreaterThan(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    bool isNumberStringLessThan(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void toSafeNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long &);
    void toSafeNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned int &);
    bool isWhiteSpace(char);
    bool isDigit(char);
    bool isAlphaNumeric(char);
    bool isAlphabeticChar(char);
    bool isLowerCaseAlphabetic(char);
    bool isUpperCaseAlphabetic(char);
    bool isUpperCaseAlphaHex(char);
    bool isLowerCaseAlphaHex(char);
    bool isStartIdentifierChar(char);
    bool isIdentifierChar(char);
    void toString(BoneTransformType);
    void getDataInheritance(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void memcpy_strided(void *, unsigned long, void const*, unsigned long, unsigned long, unsigned long);
    void loadGameVersion(GameVersion &, Json::Value const&);
    void loadGameVersion(SemVersion &, Json::Value const&);
    bool isPowerOfTwo(unsigned int);
    bool isAligned(unsigned long, unsigned int);
    void nextHigherPow2(unsigned int);
    void nextLowerPow2(unsigned int);
    void highestBitSet(unsigned int);
    void convertCapabilitiesStringToEnum(gsl::basic_string_span<char const, -1l>);
    void base64_encode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, bool);
    void base64_decode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void base64_url_to_standard(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>);
    void base64_standard_to_url(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>);
    void base64url_encode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>);
    void base64url_decode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>);
    void toString(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> const&);
    void toString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void toWideString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void toHex(char);
    void toHex(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void fromHex(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void compareNoCase(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>);
    void stringTrim(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stringTrim(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stringReplace(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int);
    void stringReplace(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, buffer_span<std::pair<gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>>>);
    void stringReplaceCopy(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, int);
    void removeInvalidFileNameCharacters(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void toLower(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void toUpper(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void toLowerInPlace(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &);
    void toUpperInPlace(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &);
    void startsWith(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void startsWith(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>);
    void normalizeLineEndings(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &);
    void cp437ToUTF8(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void cp1252ToUTF8(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stringUTF8ToUTF16(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void stringUTF16ToUTF8(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t>> const&);
    bool isValidUTF8(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void u64FromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void utf8len(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void endsWith(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void endsWith(gsl::basic_string_span<char const, -1l>, gsl::basic_string_span<char const, -1l>);
    void endsWithCaseInsensitive(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    void split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, char);
    void split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::function<bool ()(char)>);
    void safeGetline(std::istream &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &);
    void split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&, bool, bool, std::istream & (*)(std::istream &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&));
    void splitLines(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::istream & (*)(std::istream &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&));
    void stripBOM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &);
};
