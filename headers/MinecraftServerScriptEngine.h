#pragma once

class MinecraftServerScriptEngine : ScriptEngineWithContext_ltScriptServerContext_ge, ServerInstanceEventListener {

    virtual void MinecraftServerScriptEngine::~MinecraftServerScriptEngine();
    virtual void MinecraftServerScriptEngine::~MinecraftServerScriptEngine();
    virtual void initialize(void);
    virtual void ScriptEngineWithContext<ScriptServerContext>::shutdown(void);
    virtual void onLogReceived(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void onInfoReceived(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void onWarnReceived(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void onErrorReceived(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void makeErrorResultObject(ScriptApi::ScriptObjectHandle &);
    virtual void processLogCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processRegisterEventDataCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processCreateEventDataCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processListenForEventCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processBroadcastEventCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processCreateEntityCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processDestroyEntityCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processIsValidEntityCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processRegisterComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processCreateComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processDestroyComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processHasComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processGetComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processApplyComponentChangesCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processRegisterQueryCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processAddFilterToQueryCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processGetEntitiesFromQueryCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processGetBlockCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processGetBlocksCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processExecuteCommandCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processRegisterSystemCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processInfoCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processWarningCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void processErrorCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpDefineActor(ActorUniqueID const&, ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpDefineActor(Actor const&, ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpGetActor(ScriptObjectBinder const&, Actor **);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpGetBlockSource(ScriptObjectBinder const&, BlockSource **);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpGetBlock(ScriptObjectBinder const&, Block const**, BlockSource const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpGetBlockPos(ScriptObjectBinder const&, BlockPos &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpDefineLevel(ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpGetLevel(ScriptObjectBinder const&, Level **);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpDefineItemStack(ItemInstance const&, ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpPopulateEcsID(Json::Value &);
    virtual void setupInterface(void);
    virtual void ScriptEngineWithContext<ScriptServerContext>::registerEventData(ScriptApi::ScriptVersionInfo const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::createEventData(ScriptApi::ScriptVersionInfo const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::onEventReceivedFromScriptEngine(ScriptApi::ScriptVersionInfo const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::createEntity(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::createEntity(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::destroyEntity(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::isValidEntity(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, bool &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::registerComponent(ScriptApi::ScriptVersionInfo const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::createComponent(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::getComponent(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::hasComponent(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, bool &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::destroyComponent(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::applyComponentChanges(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::registerScriptOnlyComponent(ScriptApi::ScriptVersionInfo const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::registerQuery(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::registerQuery(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::getEntitiesFromQuery(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::getEntitiesFromQuery(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, double, double, double, double, double, double, std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> &);
    virtual void ScriptEngineWithContext<ScriptServerContext>::addFilter(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::getBlock(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &, BlockPos const&, ScriptApi::ScriptObjectHandle const&, ScriptObjectBinder const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpDefineTickingArea(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &, ITickingArea const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::helpDefineTickingArea(ScriptApi::ScriptVersionInfo const&, ScriptApi::ScriptObjectHandle &, ActorUniqueID const&);
    virtual void onExecuteCommandCalled(ScriptApi::ScriptVersionInfo const&, ScriptCommand &&);
    virtual void executeCommand(ScriptCommand const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::onCommandOutputCallback(unsigned int, Json::Value &&);
    virtual void _registerSystemObjects(ScriptApi::ScriptObjectHandle const&);
    virtual void ScriptEngineWithContext<ScriptServerContext>::_hasEvent(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)const;
    virtual void _helpRegisterSystemCallbacks(ScriptApi::ScriptObjectHandle const&);
    virtual void _handleError(ScriptApi::ScriptReportItem const&);
    virtual void _handleWarning(ScriptApi::ScriptReportItem const&);
    virtual void onServerLevelInitialized(ServerInstance &, Level &);
    virtual void onServerUpdateStart(ServerInstance &);
    virtual void onServerUpdateEnd(ServerInstance &);
    virtual void onServerThreadStarted(ServerInstance &);
    virtual void onLeaveGameDone(ServerInstance &);
    virtual void onLevelTick(void);
    virtual void ;
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::~MinecraftServerScriptEngine();
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::~MinecraftServerScriptEngine();
    virtual void `non-virtual thunk to'ScriptEngine::makeErrorResultObject(ScriptApi::ScriptObjectHandle &);
    virtual void `non-virtual thunk to'ScriptEngine::processLogCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processRegisterEventDataCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processCreateEventDataCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processListenForEventCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processBroadcastEventCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processCreateEntityCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processDestroyEntityCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processIsValidEntityCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processRegisterComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processCreateComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processDestroyComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processHasComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processGetComponentCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processApplyComponentChangesCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processRegisterQueryCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processAddFilterToQueryCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processGetEntitiesFromQueryCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processGetBlockCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processGetBlocksCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processExecuteCommandCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processRegisterSystemCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processInfoCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processWarningCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void `non-virtual thunk to'ScriptEngine::processErrorCallback(std::vector<ScriptApi::ScriptObjectHandle, std::allocator<ScriptApi::ScriptObjectHandle>> const&, ScriptApi::ScriptObjectHandle&);
    virtual void ;
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::~MinecraftServerScriptEngine();
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::~MinecraftServerScriptEngine();
    virtual void onServerInitializeStart(ServerInstance &);
    virtual void onServerInitializeEnd(ServerInstance &);
    virtual void onServerMinecraftInitialized(ServerInstance &, Minecraft &);
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::onServerLevelInitialized(ServerInstance &, Level &);
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::onServerUpdateStart(ServerInstance &);
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::onServerUpdateEnd(ServerInstance &);
    virtual void onServerSuspend(ServerInstance &);
    virtual void onServerResume(ServerInstance &);
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::onServerThreadStarted(ServerInstance &);
    virtual void onServerThreadStopped(ServerInstance &);
    virtual void onStartLeaveGame(ServerInstance &);
    virtual void `non-virtual thunk to'MinecraftServerScriptEngine::onLeaveGameDone(ServerInstance &);
}
