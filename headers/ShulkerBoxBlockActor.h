#pragma once

class ShulkerBoxBlockActor : ChestBlockActor {

    virtual void ~ShulkerBoxBlockActor();
    virtual void ~ShulkerBoxBlockActor();
    virtual void load(Level &, CompoundTag const&, DataLoadHelper &);
    virtual void save(CompoundTag &)const;
    virtual void saveItemInstanceData(CompoundTag &);
    virtual void BlockActor::saveBlockData(CompoundTag &, BlockSource &)const;
    virtual void BlockActor::loadBlockData(CompoundTag const&, BlockSource &, DataLoadHelper &);
    virtual void BlockActor::onCustomTagLoadDone(BlockSource &);
    virtual void tick(BlockSource &);
    virtual void BlockActor::isFinished(void);
    virtual void onChanged(BlockSource &);
    virtual void BlockActor::isMovable(BlockSource &);
    virtual void BlockActor::isCustomNameSaved(void);
    virtual void getUpdatePacket(BlockSource &);
    virtual void onPlace(BlockSource &);
    virtual void onUpdatePacket(CompoundTag const&, BlockSource &);
    virtual void onMove(void);
    virtual void onRemoved(BlockSource &);
    virtual void triggerEvent(int, int);
    virtual void clearCache(void);
    virtual void onNeighborChanged(BlockSource &, BlockPos const&);
    virtual void BlockActor::getShadowRadius(BlockSource &)const;
    virtual void BlockActor::hasAlphaLayer(void)const;
    virtual void getCrackEntity(BlockSource &, BlockPos const&);
    virtual void getDebugText(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> &, BlockPos const&);
    virtual void _ZNK10BlockActor13getCustomNameB5cxx11Ev;
    virtual void _ZN10BlockActor21getFilteredCustomNameB5cxx11ERK18UIProfanityContext;
    virtual void _ZNK20ShulkerBoxBlockActor7getNameB5cxx11Ev;
    virtual void _ZN10BlockActor22getImmersiveReaderTextB5cxx11ER11BlockSource;
    virtual void BlockActor::getRepairCost(void)const;
    virtual void BlockActor::getOwningPiston(BlockSource &);
    virtual void getContainer(void);
    virtual void BlockActor::getDeletionDelayTimeSeconds(void)const;
    virtual void BlockActor::onChunkLoaded(LevelChunk &);
    virtual void BlockActor::onChunkUnloaded(LevelChunk &);
    virtual void startOpen(Player &);
    virtual void RandomizableBlockActorFillingContainer::dropContents(BlockSource &, Vec3 const&, bool);
    virtual void getContainerSize(void)const;
    virtual void getMaxStackSize(void)const;
    virtual void getItem(int)const;
    virtual void setItem(int, ItemStack const&);
    virtual void loadItems(CompoundTag const&, Level &);
    virtual void saveItems(CompoundTag &)const;
    virtual void stopOpen(Player &);
    virtual void clearInventory(int);
    virtual void setContainerChanged(int);
    virtual void canPushInItem(BlockSource &, int, int, ItemInstance const&)const;
    virtual void canPullOutItem(BlockSource &, int, int, ItemInstance const&)const;
    virtual void addContentChangeListener(ContainerContentChangeListener *);
    virtual void removeContentChangeListener(ContainerContentChangeListener *);
    virtual void playOpenSound(BlockSource &);
    virtual void playCloseSound(BlockSource &);
    virtual void _canOpenThis(BlockSource &)const;
    virtual void getObstructionAABB(void)const;
    virtual void _detectEntityObstruction(BlockSource &)const;
    virtual void ;
    virtual void `non-virtual thunk to'~ShulkerBoxBlockActor();
    virtual void `non-virtual thunk to'~ShulkerBoxBlockActor();
    virtual void Container::init(void);
    virtual void `non-virtual thunk to'addContentChangeListener(ContainerContentChangeListener *);
    virtual void `non-virtual thunk to'removeContentChangeListener(ContainerContentChangeListener *);
    virtual void `non-virtual thunk to'getItem(int)const;
    virtual void Container::hasRoomForItem(ItemStack const&);
    virtual void Container::addItem(ItemStack &);
    virtual void Container::addItemToFirstEmptySlot(ItemStack &);
    virtual void `non-virtual thunk to'setItem(int, ItemStack const&);
    virtual void FillingContainer::removeItem(int, int);
    virtual void Container::removeAllItems(void);
    virtual void `non-virtual thunk to'RandomizableBlockActorFillingContainer::dropContents(BlockSource &, Vec3 const&, bool);
    virtual void `non-virtual thunk to'getContainerSize(void)const;
    virtual void `non-virtual thunk to'getMaxStackSize(void)const;
    virtual void `non-virtual thunk to'startOpen(Player &);
    virtual void `non-virtual thunk to'stopOpen(Player &);
    virtual void Container::getSlotCopies(void)const;
    virtual void Container::getSlots(void)const;
    virtual void FillingContainer::getItemCount(ItemDescriptor const&);
    virtual void Container::getItemCount(ItemStack const&);
    virtual void Container::findFirstSlotForItem(ItemStack const&)const;
    virtual void `non-virtual thunk to'canPushInItem(BlockSource &, int, int, ItemInstance const&)const;
    virtual void `non-virtual thunk to'canPullOutItem(BlockSource &, int, int, ItemInstance const&)const;
    virtual void `non-virtual thunk to'setContainerChanged(int);
    virtual void Container::setContainerMoved(void);
    virtual void Container::setCustomName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
    virtual void Container::hasCustomName(void)const;
    virtual void Container::readAdditionalSaveData(CompoundTag const&);
    virtual void Container::addAdditionalSaveData(CompoundTag &);
    virtual void Container::createTransactionContext(std::function<void ()(Container&, int, ItemStack const&, ItemStack const&)>, std::function<void ()(void)>);
    virtual void Container::triggerTransactionChange(int, ItemStack const&, ItemStack const&);
    virtual void FillingContainer::add(ItemStack &);
    virtual void FillingContainer::canAdd(ItemStack const&)const;
    virtual void FillingContainer::dropAll(bool);
    virtual void FillingContainer::clearSlot(int);
    virtual void `non-virtual thunk to'clearInventory(int);
    virtual void FillingContainer::load(ListTag const&, SemVersion const&, Level &);
    virtual void FillingContainer::doDrop(ItemStack &, bool);
    virtual void FillingContainer::getEmptySlotsCount(void)const;
}
